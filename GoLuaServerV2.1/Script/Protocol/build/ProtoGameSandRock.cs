// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protoGameSandRock.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameSandRock {

  /// <summary>Holder for reflection information generated from protoGameSandRock.proto</summary>
  public static partial class ProtoGameSandRockReflection {

    #region Descriptor
    /// <summary>File descriptor for protoGameSandRock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoGameSandRockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdwcm90b0dhbWVTYW5kUm9jay5wcm90bxIMR2FtZVNhbmRSb2NrIswBCgVf",
            "dXNlchIOCgZ1c2VySWQYASABKA0SDgoGb3BlbklkGAIgASgJEhAKCG5pY2tO",
            "YW1lGAMgASgJEg0KBWxldmVsGAQgASgNEgsKA2V4cBgFIAEoDRIOCgZmYWNl",
            "SWQYBiABKA0SDgoGZ2VuZGVyGAcgASgNEg4KBnJvb21JZBgIIAEoDRIPCgdj",
            "aGFpcklkGAkgASgNEgoKAmhwGAogASgNEg0KBWhwTWF4GAsgASgNEgoKAnNw",
            "GAwgASgNEg0KBXNwTWF4GA0gASgNIjAKDF91c2VyUGFja2FnZRIPCgdzbG90",
            "TWF4GAEgASgNEg8KB3Nsb3ROb3cYAiABKA0iCwoJX3VzZXJIb21lIpUBCglH",
            "YW1lTG9naW4SEQoJbWFjaGluZUlkGAEgASgJEg4KBm9wZW5JZBgCIAEoCRIO",
            "CgZ1c2VySWQYAyABKA0SEAoIcGFzc3dvcmQYBCABKAkSDgoGaXBBZGRyGAUg",
            "ASgJEg8KB2NoYW5uZWwYBiABKA0SEgoKZGV2aWNlVHlwZRgHIAEoCRIOCgZn",
            "YW1lSWQYCCABKA0iUgoPR2FtZUxvZ2luUmVzdWx0Eg8KB3N1Y2Nlc3MYASAB",
            "KAgSIQoEdXNlchgCIAEoCzITLkdhbWVTYW5kUm9jay5fdXNlchILCgNlcnIY",
            "AyABKAkiHAoKR2FtZUxvZ291dBIOCgZ1c2VySWQYASABKA0iIwoQR2FtZUxv",
            "Z291dFJlc3VsdBIPCgdzdWNjZXNzGAEgASgIIhsKCEdhbWVJbmZvEg8KB25w",
            "Y0xpc3QYASABKA0iLQoIVXNlckxpc3QSIQoEdXNlchgBIAMoCzITLkdhbWVT",
            "YW5kUm9jay5fdXNlciIgCg5PdGhlckxlYXZlUm9vbRIOCgZ1c2VySWQYASAB",
            "KA0iegoJX2xvY2F0aW9uEg4KBnVzZXJJZBgBIAEoDRIJCgF4GAIgASgCEgkK",
            "AXkYAyABKAISCQoBehgEIAEoAhIPCgdmYWNlRGlyGAUgASgCEg4KBmFjdGlv",
            "bhgGIAEoBBINCgVwYXJhbRgHIAEoBRIMCgRpdGVtGAggASgNIkkKDlBsYXll",
            "ckxvY2F0aW9uEikKCGxvY2F0aW9uGAEgAygLMhcuR2FtZVNhbmRSb2NrLl9s",
            "b2NhdGlvbhIMCgR0aW1lGAIgASgEIj4KClBsYXllckluZm8SDgoGdXNlcklk",
            "GAEgASgNEhAKCG5pY2tOYW1lGAIgASgJEg4KBmdlbmRlchgDIAEoDSIXCgVT",
            "bGVlcBIOCgZ1c2VySWQYASABKA0iSwoOX3Jlc291cmNlUG9pbnQSEAoIYXJl",
            "YU5hbWUYASABKAkSEQoJYXJlYVBvaW50GAIgASgNEhQKDHJlc291cmNlVHlw",
            "ZRgDIAEoDSJPCg5SZXNvdXJjZVVwZGF0ZRIsCgZwb2ludHMYASADKAsyHC5H",
            "YW1lU2FuZFJvY2suX3Jlc291cmNlUG9pbnQSDwoHd2VhdGhlchgCIAEoDSI5",
            "CgtSZXNvdXJjZUdldBIqCgRpbmZvGAEgASgLMhwuR2FtZVNhbmRSb2NrLl9y",
            "ZXNvdXJjZVBvaW50IncKEF9yZXNvdXJjZVRlcnJhaW4SEAoIYXJlYU5hbWUY",
            "ASABKAkSEQoJYXJlYVBvaW50GAIgASgNEhQKDHJlc291cmNlVHlwZRgDIAEo",
            "DRITCgt0cnVua0hlYWx0aBgEIAEoDRITCgtzdHVtcEhlYWx0aBgFIAEoDSJH",
            "ChVSZXNvdXJjZVRlcnJhaW5VcGRhdGUSLgoGcG9pbnRzGAEgAygLMh4uR2Ft",
            "ZVNhbmRSb2NrLl9yZXNvdXJjZVRlcnJhaW4iYgoSUmVzb3VyY2VUZXJyYWlu",
            "R2V0EiwKBGluZm8YASABKAsyHi5HYW1lU2FuZFJvY2suX3Jlc291cmNlVGVy",
            "cmFpbhIOCgZ0b29sSWQYAiABKA0SDgoGZGFtYWdlGAMgASgNIk8KBV9pdGVt",
            "Eg4KBml0ZW1JZBgBIAEoDRIPCgdpdGVtTnVtGAIgASgFEhQKDGl0ZW1OdW1U",
            "b3RhbBgDIAEoBRIPCgdpdGVtVUlkGAQgASgFIlQKB0l0ZW1HZXQSIQoEaXRl",
            "bRgBIAMoCzITLkdhbWVTYW5kUm9jay5faXRlbRINCgVsZXZlbBgCIAEoDRIL",
            "CgNleHAYAyABKA0SCgoCc3AYBCABKA0iIwoPQ3JlYXRpb25NYWNoaW5lEhAK",
            "CGNyZWF0ZUlkGAEgASgNIiAKDENyZWF0aW9uSXRlbRIQCghjcmVhdGVJZBgB",
            "IAEoDSIqChZDcmVhdGlvbkl0ZW1FeHBlcmltZW50EhAKCGNyZWF0ZUlkGAEg",
            "ASgNIiMKD0NyZWF0aW9uUmVjeWNsZRIQCghjcmVhdGVJZBgBIAEoDSI4Cg9D",
            "cmVhdGlvbkNvb2tpbmcSEAoIY3JlYXRlSWQYASABKA0SEwoLTWF0ZXJpYWxz",
            "SUQYAiABKA1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._user), global::GameSandRock._user.Parser, new[]{ "UserId", "OpenId", "NickName", "Level", "Exp", "FaceId", "Gender", "RoomId", "ChairId", "Hp", "HpMax", "Sp", "SpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._userPackage), global::GameSandRock._userPackage.Parser, new[]{ "SlotMax", "SlotNow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._userHome), global::GameSandRock._userHome.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.GameLogin), global::GameSandRock.GameLogin.Parser, new[]{ "MachineId", "OpenId", "UserId", "Password", "IpAddr", "Channel", "DeviceType", "GameId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.GameLoginResult), global::GameSandRock.GameLoginResult.Parser, new[]{ "Success", "User", "Err" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.GameLogout), global::GameSandRock.GameLogout.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.GameLogoutResult), global::GameSandRock.GameLogoutResult.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.GameInfo), global::GameSandRock.GameInfo.Parser, new[]{ "NpcList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.UserList), global::GameSandRock.UserList.Parser, new[]{ "User" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.OtherLeaveRoom), global::GameSandRock.OtherLeaveRoom.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._location), global::GameSandRock._location.Parser, new[]{ "UserId", "X", "Y", "Z", "FaceDir", "Action", "Param", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.PlayerLocation), global::GameSandRock.PlayerLocation.Parser, new[]{ "Location", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.PlayerInfo), global::GameSandRock.PlayerInfo.Parser, new[]{ "UserId", "NickName", "Gender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.Sleep), global::GameSandRock.Sleep.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._resourcePoint), global::GameSandRock._resourcePoint.Parser, new[]{ "AreaName", "AreaPoint", "ResourceType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.ResourceUpdate), global::GameSandRock.ResourceUpdate.Parser, new[]{ "Points", "Weather" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.ResourceGet), global::GameSandRock.ResourceGet.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._resourceTerrain), global::GameSandRock._resourceTerrain.Parser, new[]{ "AreaName", "AreaPoint", "ResourceType", "TrunkHealth", "StumpHealth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.ResourceTerrainUpdate), global::GameSandRock.ResourceTerrainUpdate.Parser, new[]{ "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.ResourceTerrainGet), global::GameSandRock.ResourceTerrainGet.Parser, new[]{ "Info", "ToolId", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock._item), global::GameSandRock._item.Parser, new[]{ "ItemId", "ItemNum", "ItemNumTotal", "ItemUId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.ItemGet), global::GameSandRock.ItemGet.Parser, new[]{ "Item", "Level", "Exp", "Sp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.CreationMachine), global::GameSandRock.CreationMachine.Parser, new[]{ "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.CreationItem), global::GameSandRock.CreationItem.Parser, new[]{ "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.CreationItemExperiment), global::GameSandRock.CreationItemExperiment.Parser, new[]{ "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.CreationRecycle), global::GameSandRock.CreationRecycle.Parser, new[]{ "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameSandRock.CreationCooking), global::GameSandRock.CreationCooking.Parser, new[]{ "CreateId", "MaterialsID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///-------------------------------------用户信息---------------------------
  /// </summary>
  public sealed partial class _user : pb::IMessage<_user> {
    private static readonly pb::MessageParser<_user> _parser = new pb::MessageParser<_user>(() => new _user());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_user> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _user() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _user(_user other) : this() {
      userId_ = other.userId_;
      openId_ = other.openId_;
      nickName_ = other.nickName_;
      level_ = other.level_;
      exp_ = other.exp_;
      faceId_ = other.faceId_;
      gender_ = other.gender_;
      roomId_ = other.roomId_;
      chairId_ = other.chairId_;
      hp_ = other.hp_;
      hpMax_ = other.hpMax_;
      sp_ = other.sp_;
      spMax_ = other.spMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _user Clone() {
      return new _user(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 2;
    private string openId_ = "";
    /// <summary>
    ///渠道sdkID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    ///用户等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 5;
    private uint exp_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "faceId" field.</summary>
    public const int FaceIdFieldNumber = 6;
    private uint faceId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 7;
    private uint gender_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 8;
    private uint roomId_;
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 9;
    private uint chairId_;
    /// <summary>
    ///位置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 10;
    private uint hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "hpMax" field.</summary>
    public const int HpMaxFieldNumber = 11;
    private uint hpMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HpMax {
      get { return hpMax_; }
      set {
        hpMax_ = value;
      }
    }

    /// <summary>Field number for the "sp" field.</summary>
    public const int SpFieldNumber = 12;
    private uint sp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sp {
      get { return sp_; }
      set {
        sp_ = value;
      }
    }

    /// <summary>Field number for the "spMax" field.</summary>
    public const int SpMaxFieldNumber = 13;
    private uint spMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpMax {
      get { return spMax_; }
      set {
        spMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _user);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_user other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (OpenId != other.OpenId) return false;
      if (NickName != other.NickName) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (FaceId != other.FaceId) return false;
      if (Gender != other.Gender) return false;
      if (RoomId != other.RoomId) return false;
      if (ChairId != other.ChairId) return false;
      if (Hp != other.Hp) return false;
      if (HpMax != other.HpMax) return false;
      if (Sp != other.Sp) return false;
      if (SpMax != other.SpMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpMax != 0) hash ^= HpMax.GetHashCode();
      if (Sp != 0) hash ^= Sp.GetHashCode();
      if (SpMax != 0) hash ^= SpMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpenId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Exp);
      }
      if (FaceId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(FaceId);
      }
      if (Gender != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Gender);
      }
      if (RoomId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(RoomId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ChairId);
      }
      if (Hp != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Hp);
      }
      if (HpMax != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(HpMax);
      }
      if (Sp != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Sp);
      }
      if (SpMax != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SpMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FaceId);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChairId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (HpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HpMax);
      }
      if (Sp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sp);
      }
      if (SpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_user other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpMax != 0) {
        HpMax = other.HpMax;
      }
      if (other.Sp != 0) {
        Sp = other.Sp;
      }
      if (other.SpMax != 0) {
        SpMax = other.SpMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            OpenId = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            Exp = input.ReadUInt32();
            break;
          }
          case 48: {
            FaceId = input.ReadUInt32();
            break;
          }
          case 56: {
            Gender = input.ReadUInt32();
            break;
          }
          case 64: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 72: {
            ChairId = input.ReadUInt32();
            break;
          }
          case 80: {
            Hp = input.ReadUInt32();
            break;
          }
          case 88: {
            HpMax = input.ReadUInt32();
            break;
          }
          case 96: {
            Sp = input.ReadUInt32();
            break;
          }
          case 104: {
            SpMax = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户背包
  /// </summary>
  public sealed partial class _userPackage : pb::IMessage<_userPackage> {
    private static readonly pb::MessageParser<_userPackage> _parser = new pb::MessageParser<_userPackage>(() => new _userPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_userPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userPackage(_userPackage other) : this() {
      slotMax_ = other.slotMax_;
      slotNow_ = other.slotNow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userPackage Clone() {
      return new _userPackage(this);
    }

    /// <summary>Field number for the "slotMax" field.</summary>
    public const int SlotMaxFieldNumber = 1;
    private uint slotMax_;
    /// <summary>
    ///道具的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotMax {
      get { return slotMax_; }
      set {
        slotMax_ = value;
      }
    }

    /// <summary>Field number for the "slotNow" field.</summary>
    public const int SlotNowFieldNumber = 2;
    private uint slotNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SlotNow {
      get { return slotNow_; }
      set {
        slotNow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _userPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_userPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SlotMax != other.SlotMax) return false;
      if (SlotNow != other.SlotNow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SlotMax != 0) hash ^= SlotMax.GetHashCode();
      if (SlotNow != 0) hash ^= SlotNow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotMax != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SlotMax);
      }
      if (SlotNow != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SlotNow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotMax);
      }
      if (SlotNow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SlotNow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_userPackage other) {
      if (other == null) {
        return;
      }
      if (other.SlotMax != 0) {
        SlotMax = other.SlotMax;
      }
      if (other.SlotNow != 0) {
        SlotNow = other.SlotNow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SlotMax = input.ReadUInt32();
            break;
          }
          case 16: {
            SlotNow = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户家园信息
  /// </summary>
  public sealed partial class _userHome : pb::IMessage<_userHome> {
    private static readonly pb::MessageParser<_userHome> _parser = new pb::MessageParser<_userHome>(() => new _userHome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_userHome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userHome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userHome(_userHome other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _userHome Clone() {
      return new _userHome(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _userHome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_userHome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_userHome other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------登录-------------------------------
  ///游戏服务器登录申请,  客户端登录最快的方式是发userId，  其次是openId，  最后是machineId ,  注意如果发送了machineId，那么openId会被忽略
  /// </summary>
  public sealed partial class GameLogin : pb::IMessage<GameLogin> {
    private static readonly pb::MessageParser<GameLogin> _parser = new pb::MessageParser<GameLogin>(() => new GameLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin(GameLogin other) : this() {
      machineId_ = other.machineId_;
      openId_ = other.openId_;
      userId_ = other.userId_;
      password_ = other.password_;
      ipAddr_ = other.ipAddr_;
      channel_ = other.channel_;
      deviceType_ = other.deviceType_;
      gameId_ = other.gameId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin Clone() {
      return new GameLogin(this);
    }

    /// <summary>Field number for the "machineId" field.</summary>
    public const int MachineIdFieldNumber = 1;
    private string machineId_ = "";
    /// <summary>
    ///机器序列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineId {
      get { return machineId_; }
      set {
        machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "openId" field.</summary>
    public const int OpenIdFieldNumber = 2;
    private string openId_ = "";
    /// <summary>
    ///  渠道id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpenId {
      get { return openId_; }
      set {
        openId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 3;
    private uint userId_;
    /// <summary>
    ///用户 I D
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    /// <summary>
    ///登录密码(32md5)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ipAddr" field.</summary>
    public const int IpAddrFieldNumber = 5;
    private string ipAddr_ = "";
    /// <summary>
    ///IP地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddr {
      get { return ipAddr_; }
      set {
        ipAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 6;
    private uint channel_;
    /// <summary>
    ///渠道号 1为官网
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "deviceType" field.</summary>
    public const int DeviceTypeFieldNumber = 7;
    private string deviceType_ = "";
    /// <summary>
    ///设备的型号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceType {
      get { return deviceType_; }
      set {
        deviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameId" field.</summary>
    public const int GameIdFieldNumber = 8;
    private uint gameId_;
    /// <summary>
    ///登录游戏编号 , 必须发
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineId != other.MachineId) return false;
      if (OpenId != other.OpenId) return false;
      if (UserId != other.UserId) return false;
      if (Password != other.Password) return false;
      if (IpAddr != other.IpAddr) return false;
      if (Channel != other.Channel) return false;
      if (DeviceType != other.DeviceType) return false;
      if (GameId != other.GameId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MachineId.Length != 0) hash ^= MachineId.GetHashCode();
      if (OpenId.Length != 0) hash ^= OpenId.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (IpAddr.Length != 0) hash ^= IpAddr.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (DeviceType.Length != 0) hash ^= DeviceType.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MachineId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MachineId);
      }
      if (OpenId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OpenId);
      }
      if (UserId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UserId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (IpAddr.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IpAddr);
      }
      if (Channel != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Channel);
      }
      if (DeviceType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceType);
      }
      if (GameId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MachineId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
      }
      if (OpenId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpenId);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (IpAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddr);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
      }
      if (DeviceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceType);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogin other) {
      if (other == null) {
        return;
      }
      if (other.MachineId.Length != 0) {
        MachineId = other.MachineId;
      }
      if (other.OpenId.Length != 0) {
        OpenId = other.OpenId;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.IpAddr.Length != 0) {
        IpAddr = other.IpAddr;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      if (other.DeviceType.Length != 0) {
        DeviceType = other.DeviceType;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MachineId = input.ReadString();
            break;
          }
          case 18: {
            OpenId = input.ReadString();
            break;
          }
          case 24: {
            UserId = input.ReadUInt32();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 42: {
            IpAddr = input.ReadString();
            break;
          }
          case 48: {
            Channel = input.ReadUInt32();
            break;
          }
          case 58: {
            DeviceType = input.ReadString();
            break;
          }
          case 64: {
            GameId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登录成功
  /// </summary>
  public sealed partial class GameLoginResult : pb::IMessage<GameLoginResult> {
    private static readonly pb::MessageParser<GameLoginResult> _parser = new pb::MessageParser<GameLoginResult>(() => new GameLoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLoginResult(GameLoginResult other) : this() {
      success_ = other.success_;
      User = other.user_ != null ? other.User.Clone() : null;
      err_ = other.err_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLoginResult Clone() {
      return new GameLoginResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// 1成功，0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::GameSandRock._user user_;
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSandRock._user User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 3;
    private string err_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(User, other.User)) return false;
      if (Err != other.Err) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (Err.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLoginResult other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::GameSandRock._user();
        }
        User.MergeFrom(other.User);
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::GameSandRock._user();
            }
            input.ReadMessage(user_);
            break;
          }
          case 26: {
            Err = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登出
  /// </summary>
  public sealed partial class GameLogout : pb::IMessage<GameLogout> {
    private static readonly pb::MessageParser<GameLogout> _parser = new pb::MessageParser<GameLogout>(() => new GameLogout());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogout> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogout() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogout(GameLogout other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogout Clone() {
      return new GameLogout(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogout);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogout other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogout other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 登出结果
  /// </summary>
  public sealed partial class GameLogoutResult : pb::IMessage<GameLogoutResult> {
    private static readonly pb::MessageParser<GameLogoutResult> _parser = new pb::MessageParser<GameLogoutResult>(() => new GameLogoutResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogoutResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogoutResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogoutResult(GameLogoutResult other) : this() {
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogoutResult Clone() {
      return new GameLogoutResult(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    /// 1成功，0失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogoutResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogoutResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogoutResult other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏的信息同步
  /// </summary>
  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      npcList_ = other.npcList_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "npcList" field.</summary>
    public const int NpcListFieldNumber = 1;
    private uint npcList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NpcList {
      get { return npcList_; }
      set {
        npcList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NpcList != other.NpcList) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NpcList != 0) hash ^= NpcList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NpcList != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NpcList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NpcList != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NpcList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.NpcList != 0) {
        NpcList = other.NpcList;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NpcList = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///其他玩家进入游戏场景
  /// </summary>
  public sealed partial class UserList : pb::IMessage<UserList> {
    private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList(UserList other) : this() {
      user_ = other.user_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserList Clone() {
      return new UserList(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSandRock._user> _repeated_user_codec
        = pb::FieldCodec.ForMessage(10, global::GameSandRock._user.Parser);
    private readonly pbc::RepeatedField<global::GameSandRock._user> user_ = new pbc::RepeatedField<global::GameSandRock._user>();
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSandRock._user> User {
      get { return user_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!user_.Equals(other.user_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= user_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      user_.WriteTo(output, _repeated_user_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += user_.CalculateSize(_repeated_user_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserList other) {
      if (other == null) {
        return;
      }
      user_.Add(other.user_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 其他玩家离开游戏
  /// </summary>
  public sealed partial class OtherLeaveRoom : pb::IMessage<OtherLeaveRoom> {
    private static readonly pb::MessageParser<OtherLeaveRoom> _parser = new pb::MessageParser<OtherLeaveRoom>(() => new OtherLeaveRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherLeaveRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherLeaveRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherLeaveRoom(OtherLeaveRoom other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherLeaveRoom Clone() {
      return new OtherLeaveRoom(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherLeaveRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherLeaveRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherLeaveRoom other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------同步位置-------------------------------
  /// </summary>
  public sealed partial class _location : pb::IMessage<_location> {
    private static readonly pb::MessageParser<_location> _parser = new pb::MessageParser<_location>(() => new _location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _location(_location other) : this() {
      userId_ = other.userId_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      faceDir_ = other.faceDir_;
      action_ = other.action_;
      param_ = other.param_;
      item_ = other.item_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _location Clone() {
      return new _location(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "faceDir" field.</summary>
    public const int FaceDirFieldNumber = 5;
    private float faceDir_;
    /// <summary>
    /// 面对方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FaceDir {
      get { return faceDir_; }
      set {
        faceDir_ = value;
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 6;
    private ulong action_;
    /// <summary>
    ///玩家当前行为
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 7;
    private int param_;
    /// <summary>
    ///行为的参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 8;
    private uint item_;
    /// <summary>
    /// 手持道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FaceDir, other.FaceDir)) return false;
      if (Action != other.Action) return false;
      if (Param != other.Param) return false;
      if (Item != other.Item) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (FaceDir != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FaceDir);
      if (Action != 0UL) hash ^= Action.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (Item != 0) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (FaceDir != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(FaceDir);
      }
      if (Action != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Action);
      }
      if (Param != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Param);
      }
      if (Item != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (FaceDir != 0F) {
        size += 1 + 4;
      }
      if (Action != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Action);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (Item != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_location other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.FaceDir != 0F) {
        FaceDir = other.FaceDir;
      }
      if (other.Action != 0UL) {
        Action = other.Action;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      if (other.Item != 0) {
        Item = other.Item;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 45: {
            FaceDir = input.ReadFloat();
            break;
          }
          case 48: {
            Action = input.ReadUInt64();
            break;
          }
          case 56: {
            Param = input.ReadInt32();
            break;
          }
          case 64: {
            Item = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///位置信息同步
  /// </summary>
  public sealed partial class PlayerLocation : pb::IMessage<PlayerLocation> {
    private static readonly pb::MessageParser<PlayerLocation> _parser = new pb::MessageParser<PlayerLocation>(() => new PlayerLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLocation(PlayerLocation other) : this() {
      location_ = other.location_.Clone();
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLocation Clone() {
      return new PlayerLocation(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSandRock._location> _repeated_location_codec
        = pb::FieldCodec.ForMessage(10, global::GameSandRock._location.Parser);
    private readonly pbc::RepeatedField<global::GameSandRock._location> location_ = new pbc::RepeatedField<global::GameSandRock._location>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSandRock._location> Location {
      get { return location_; }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!location_.Equals(other.location_)) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= location_.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      location_.WriteTo(output, _repeated_location_codec);
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += location_.CalculateSize(_repeated_location_codec);
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLocation other) {
      if (other == null) {
        return;
      }
      location_.Add(other.location_);
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            location_.AddEntriesFrom(input, _repeated_location_codec);
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------玩家信息编辑-----------------------------
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      userId_ = other.userId_;
      nickName_ = other.nickName_;
      gender_ = other.gender_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///用户 I D
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nickName" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    /// 修改昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gender" field.</summary>
    public const int GenderFieldNumber = 3;
    private uint gender_;
    /// <summary>
    ///性别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NickName != other.NickName) return false;
      if (Gender != other.Gender) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Gender != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Gender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            Gender = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------睡觉-------------------------------
  /// </summary>
  public sealed partial class Sleep : pb::IMessage<Sleep> {
    private static readonly pb::MessageParser<Sleep> _parser = new pb::MessageParser<Sleep>(() => new Sleep());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sleep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sleep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sleep(Sleep other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sleep Clone() {
      return new Sleep(this);
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sleep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sleep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sleep other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------拾取类资源刷新和采集----------------------------------
  /// </summary>
  public sealed partial class _resourcePoint : pb::IMessage<_resourcePoint> {
    private static readonly pb::MessageParser<_resourcePoint> _parser = new pb::MessageParser<_resourcePoint>(() => new _resourcePoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_resourcePoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourcePoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourcePoint(_resourcePoint other) : this() {
      areaName_ = other.areaName_;
      areaPoint_ = other.areaPoint_;
      resourceType_ = other.resourceType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourcePoint Clone() {
      return new _resourcePoint(this);
    }

    /// <summary>Field number for the "areaName" field.</summary>
    public const int AreaNameFieldNumber = 1;
    private string areaName_ = "";
    /// <summary>
    /// 区域的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaName {
      get { return areaName_; }
      set {
        areaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "areaPoint" field.</summary>
    public const int AreaPointFieldNumber = 2;
    private uint areaPoint_;
    /// <summary>
    /// 区域中第几个point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AreaPoint {
      get { return areaPoint_; }
      set {
        areaPoint_ = value;
      }
    }

    /// <summary>Field number for the "resourceType" field.</summary>
    public const int ResourceTypeFieldNumber = 3;
    private uint resourceType_;
    /// <summary>
    /// 生成了什么东西
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _resourcePoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_resourcePoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaName != other.AreaName) return false;
      if (AreaPoint != other.AreaPoint) return false;
      if (ResourceType != other.ResourceType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaName.Length != 0) hash ^= AreaName.GetHashCode();
      if (AreaPoint != 0) hash ^= AreaPoint.GetHashCode();
      if (ResourceType != 0) hash ^= ResourceType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AreaName);
      }
      if (AreaPoint != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AreaPoint);
      }
      if (ResourceType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResourceType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaName);
      }
      if (AreaPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AreaPoint);
      }
      if (ResourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResourceType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_resourcePoint other) {
      if (other == null) {
        return;
      }
      if (other.AreaName.Length != 0) {
        AreaName = other.AreaName;
      }
      if (other.AreaPoint != 0) {
        AreaPoint = other.AreaPoint;
      }
      if (other.ResourceType != 0) {
        ResourceType = other.ResourceType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AreaName = input.ReadString();
            break;
          }
          case 16: {
            AreaPoint = input.ReadUInt32();
            break;
          }
          case 24: {
            ResourceType = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceUpdate : pb::IMessage<ResourceUpdate> {
    private static readonly pb::MessageParser<ResourceUpdate> _parser = new pb::MessageParser<ResourceUpdate>(() => new ResourceUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUpdate(ResourceUpdate other) : this() {
      points_ = other.points_.Clone();
      weather_ = other.weather_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUpdate Clone() {
      return new ResourceUpdate(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSandRock._resourcePoint> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::GameSandRock._resourcePoint.Parser);
    private readonly pbc::RepeatedField<global::GameSandRock._resourcePoint> points_ = new pbc::RepeatedField<global::GameSandRock._resourcePoint>();
    /// <summary>
    ///刷新点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSandRock._resourcePoint> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "weather" field.</summary>
    public const int WeatherFieldNumber = 2;
    private uint weather_;
    /// <summary>
    /// 天气变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Weather {
      get { return weather_; }
      set {
        weather_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      if (Weather != other.Weather) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (Weather != 0) hash ^= Weather.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (Weather != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Weather);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (Weather != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Weather);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceUpdate other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      if (other.Weather != 0) {
        Weather = other.Weather;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 16: {
            Weather = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceGet : pb::IMessage<ResourceGet> {
    private static readonly pb::MessageParser<ResourceGet> _parser = new pb::MessageParser<ResourceGet>(() => new ResourceGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceGet(ResourceGet other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceGet Clone() {
      return new ResourceGet(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::GameSandRock._resourcePoint info_;
    /// <summary>
    /// 资源点采集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSandRock._resourcePoint Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceGet other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::GameSandRock._resourcePoint();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::GameSandRock._resourcePoint();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///---------------------------------------树木和石头资源刷新和采集----------------------------------
  /// </summary>
  public sealed partial class _resourceTerrain : pb::IMessage<_resourceTerrain> {
    private static readonly pb::MessageParser<_resourceTerrain> _parser = new pb::MessageParser<_resourceTerrain>(() => new _resourceTerrain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_resourceTerrain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourceTerrain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourceTerrain(_resourceTerrain other) : this() {
      areaName_ = other.areaName_;
      areaPoint_ = other.areaPoint_;
      resourceType_ = other.resourceType_;
      trunkHealth_ = other.trunkHealth_;
      stumpHealth_ = other.stumpHealth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _resourceTerrain Clone() {
      return new _resourceTerrain(this);
    }

    /// <summary>Field number for the "areaName" field.</summary>
    public const int AreaNameFieldNumber = 1;
    private string areaName_ = "";
    /// <summary>
    /// 区域的名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AreaName {
      get { return areaName_; }
      set {
        areaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "areaPoint" field.</summary>
    public const int AreaPointFieldNumber = 2;
    private uint areaPoint_;
    /// <summary>
    /// 区域中第几个point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AreaPoint {
      get { return areaPoint_; }
      set {
        areaPoint_ = value;
      }
    }

    /// <summary>Field number for the "resourceType" field.</summary>
    public const int ResourceTypeFieldNumber = 3;
    private uint resourceType_;
    /// <summary>
    /// 生成了什么东西  TrunkHealth,StumpHealth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = value;
      }
    }

    /// <summary>Field number for the "trunkHealth" field.</summary>
    public const int TrunkHealthFieldNumber = 4;
    private uint trunkHealth_;
    /// <summary>
    /// TrunkHealth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TrunkHealth {
      get { return trunkHealth_; }
      set {
        trunkHealth_ = value;
      }
    }

    /// <summary>Field number for the "stumpHealth" field.</summary>
    public const int StumpHealthFieldNumber = 5;
    private uint stumpHealth_;
    /// <summary>
    /// StumpHealth
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StumpHealth {
      get { return stumpHealth_; }
      set {
        stumpHealth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _resourceTerrain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_resourceTerrain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AreaName != other.AreaName) return false;
      if (AreaPoint != other.AreaPoint) return false;
      if (ResourceType != other.ResourceType) return false;
      if (TrunkHealth != other.TrunkHealth) return false;
      if (StumpHealth != other.StumpHealth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AreaName.Length != 0) hash ^= AreaName.GetHashCode();
      if (AreaPoint != 0) hash ^= AreaPoint.GetHashCode();
      if (ResourceType != 0) hash ^= ResourceType.GetHashCode();
      if (TrunkHealth != 0) hash ^= TrunkHealth.GetHashCode();
      if (StumpHealth != 0) hash ^= StumpHealth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AreaName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AreaName);
      }
      if (AreaPoint != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AreaPoint);
      }
      if (ResourceType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResourceType);
      }
      if (TrunkHealth != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TrunkHealth);
      }
      if (StumpHealth != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(StumpHealth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AreaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AreaName);
      }
      if (AreaPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AreaPoint);
      }
      if (ResourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResourceType);
      }
      if (TrunkHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TrunkHealth);
      }
      if (StumpHealth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StumpHealth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_resourceTerrain other) {
      if (other == null) {
        return;
      }
      if (other.AreaName.Length != 0) {
        AreaName = other.AreaName;
      }
      if (other.AreaPoint != 0) {
        AreaPoint = other.AreaPoint;
      }
      if (other.ResourceType != 0) {
        ResourceType = other.ResourceType;
      }
      if (other.TrunkHealth != 0) {
        TrunkHealth = other.TrunkHealth;
      }
      if (other.StumpHealth != 0) {
        StumpHealth = other.StumpHealth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AreaName = input.ReadString();
            break;
          }
          case 16: {
            AreaPoint = input.ReadUInt32();
            break;
          }
          case 24: {
            ResourceType = input.ReadUInt32();
            break;
          }
          case 32: {
            TrunkHealth = input.ReadUInt32();
            break;
          }
          case 40: {
            StumpHealth = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceTerrainUpdate : pb::IMessage<ResourceTerrainUpdate> {
    private static readonly pb::MessageParser<ResourceTerrainUpdate> _parser = new pb::MessageParser<ResourceTerrainUpdate>(() => new ResourceTerrainUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceTerrainUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainUpdate(ResourceTerrainUpdate other) : this() {
      points_ = other.points_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainUpdate Clone() {
      return new ResourceTerrainUpdate(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSandRock._resourceTerrain> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::GameSandRock._resourceTerrain.Parser);
    private readonly pbc::RepeatedField<global::GameSandRock._resourceTerrain> points_ = new pbc::RepeatedField<global::GameSandRock._resourceTerrain>();
    /// <summary>
    ///刷新点列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSandRock._resourceTerrain> Points {
      get { return points_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceTerrainUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceTerrainUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceTerrainUpdate other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceTerrainGet : pb::IMessage<ResourceTerrainGet> {
    private static readonly pb::MessageParser<ResourceTerrainGet> _parser = new pb::MessageParser<ResourceTerrainGet>(() => new ResourceTerrainGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceTerrainGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainGet(ResourceTerrainGet other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
      toolId_ = other.toolId_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceTerrainGet Clone() {
      return new ResourceTerrainGet(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::GameSandRock._resourceTerrain info_;
    /// <summary>
    /// 资源点采集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameSandRock._resourceTerrain Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "toolId" field.</summary>
    public const int ToolIdFieldNumber = 2;
    private uint toolId_;
    /// <summary>
    /// 使用工具的id , 如果工具id是0， 说明是徒手的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToolId {
      get { return toolId_; }
      set {
        toolId_ = value;
      }
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 3;
    private uint damage_;
    /// <summary>
    /// 伤害
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceTerrainGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceTerrainGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (ToolId != other.ToolId) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (ToolId != 0) hash ^= ToolId.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (ToolId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ToolId);
      }
      if (Damage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (ToolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToolId);
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceTerrainGet other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::GameSandRock._resourceTerrain();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.ToolId != 0) {
        ToolId = other.ToolId;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::GameSandRock._resourceTerrain();
            }
            input.ReadMessage(info_);
            break;
          }
          case 16: {
            ToolId = input.ReadUInt32();
            break;
          }
          case 24: {
            Damage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------------道具----------------------------------------------
  /// </summary>
  public sealed partial class _item : pb::IMessage<_item> {
    private static readonly pb::MessageParser<_item> _parser = new pb::MessageParser<_item>(() => new _item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _item(_item other) : this() {
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      itemNumTotal_ = other.itemNumTotal_;
      itemUId_ = other.itemUId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public _item Clone() {
      return new _item(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    /// <summary>
    /// 道具数量为负就是减少
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "itemNumTotal" field.</summary>
    public const int ItemNumTotalFieldNumber = 3;
    private int itemNumTotal_;
    /// <summary>
    /// 道具总数量，用来同步
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNumTotal {
      get { return itemNumTotal_; }
      set {
        itemNumTotal_ = value;
      }
    }

    /// <summary>Field number for the "itemUId" field.</summary>
    public const int ItemUIdFieldNumber = 4;
    private int itemUId_;
    /// <summary>
    /// 不能堆叠的道具具有唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemUId {
      get { return itemUId_; }
      set {
        itemUId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as _item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (ItemNumTotal != other.ItemNumTotal) return false;
      if (ItemUId != other.ItemUId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (ItemNumTotal != 0) hash ^= ItemNumTotal.GetHashCode();
      if (ItemUId != 0) hash ^= ItemUId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
      if (ItemNumTotal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemNumTotal);
      }
      if (ItemUId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemUId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (ItemNumTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNumTotal);
      }
      if (ItemUId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemUId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(_item other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.ItemNumTotal != 0) {
        ItemNumTotal = other.ItemNumTotal;
      }
      if (other.ItemUId != 0) {
        ItemUId = other.ItemUId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 24: {
            ItemNumTotal = input.ReadInt32();
            break;
          }
          case 32: {
            ItemUId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemGet : pb::IMessage<ItemGet> {
    private static readonly pb::MessageParser<ItemGet> _parser = new pb::MessageParser<ItemGet>(() => new ItemGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemGet(ItemGet other) : this() {
      item_ = other.item_.Clone();
      level_ = other.level_;
      exp_ = other.exp_;
      sp_ = other.sp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemGet Clone() {
      return new ItemGet(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameSandRock._item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::GameSandRock._item.Parser);
    private readonly pbc::RepeatedField<global::GameSandRock._item> item_ = new pbc::RepeatedField<global::GameSandRock._item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameSandRock._item> Item {
      get { return item_; }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    /// 等级是否变动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private uint exp_;
    /// <summary>
    /// 经验是否增加
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "sp" field.</summary>
    public const int SpFieldNumber = 4;
    private uint sp_;
    /// <summary>
    /// sp是否变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sp {
      get { return sp_; }
      set {
        sp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Sp != other.Sp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Sp != 0) hash ^= Sp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Exp);
      }
      if (Sp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Sp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (Sp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemGet other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Sp != 0) {
        Sp = other.Sp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt32();
            break;
          }
          case 32: {
            Sp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------------------------------机器组装 和 道具合成 回收 烹饪----------------------------------------------
  /// </summary>
  public sealed partial class CreationMachine : pb::IMessage<CreationMachine> {
    private static readonly pb::MessageParser<CreationMachine> _parser = new pb::MessageParser<CreationMachine>(() => new CreationMachine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreationMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationMachine(CreationMachine other) : this() {
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationMachine Clone() {
      return new CreationMachine(this);
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 1;
    private uint createId_;
    /// <summary>
    /// 要组装什么机器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreationMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreationMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreationMachine other) {
      if (other == null) {
        return;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreationItem : pb::IMessage<CreationItem> {
    private static readonly pb::MessageParser<CreationItem> _parser = new pb::MessageParser<CreationItem>(() => new CreationItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreationItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItem(CreationItem other) : this() {
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItem Clone() {
      return new CreationItem(this);
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 1;
    private uint createId_;
    /// <summary>
    /// 合成什么道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreationItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreationItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreationItem other) {
      if (other == null) {
        return;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreationItemExperiment : pb::IMessage<CreationItemExperiment> {
    private static readonly pb::MessageParser<CreationItemExperiment> _parser = new pb::MessageParser<CreationItemExperiment>(() => new CreationItemExperiment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreationItemExperiment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItemExperiment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItemExperiment(CreationItemExperiment other) : this() {
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationItemExperiment Clone() {
      return new CreationItemExperiment(this);
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 1;
    private uint createId_;
    /// <summary>
    ///  实验台，先不管
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreationItemExperiment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreationItemExperiment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreationItemExperiment other) {
      if (other == null) {
        return;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreationRecycle : pb::IMessage<CreationRecycle> {
    private static readonly pb::MessageParser<CreationRecycle> _parser = new pb::MessageParser<CreationRecycle>(() => new CreationRecycle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreationRecycle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationRecycle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationRecycle(CreationRecycle other) : this() {
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationRecycle Clone() {
      return new CreationRecycle(this);
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 1;
    private uint createId_;
    /// <summary>
    /// 回收什么道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreationRecycle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreationRecycle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreationRecycle other) {
      if (other == null) {
        return;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreationCooking : pb::IMessage<CreationCooking> {
    private static readonly pb::MessageParser<CreationCooking> _parser = new pb::MessageParser<CreationCooking>(() => new CreationCooking());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreationCooking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameSandRock.ProtoGameSandRockReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationCooking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationCooking(CreationCooking other) : this() {
      createId_ = other.createId_;
      materialsID_ = other.materialsID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreationCooking Clone() {
      return new CreationCooking(this);
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 1;
    private uint createId_;
    /// <summary>
    /// 烹饪什么
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    /// <summary>Field number for the "MaterialsID" field.</summary>
    public const int MaterialsIDFieldNumber = 2;
    private uint materialsID_;
    /// <summary>
    /// 烹饪的材料
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaterialsID {
      get { return materialsID_; }
      set {
        materialsID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreationCooking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreationCooking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreateId != other.CreateId) return false;
      if (MaterialsID != other.MaterialsID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (MaterialsID != 0) hash ^= MaterialsID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CreateId);
      }
      if (MaterialsID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaterialsID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateId);
      }
      if (MaterialsID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaterialsID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreationCooking other) {
      if (other == null) {
        return;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      if (other.MaterialsID != 0) {
        MaterialsID = other.MaterialsID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CreateId = input.ReadUInt32();
            break;
          }
          case 16: {
            MaterialsID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
