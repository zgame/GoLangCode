---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhushiwei.
--- DateTime: 2020/12/7 14:40
---

NetWork ={}

----------------------------------------------------------------------
--- 关闭用户网络连接
----------------------------------------------------------------------
function NetWork.Close(userId, serverId)
    luaCallGoNetWorkClose(userId, serverId)
end

----------------------------------------------------------------------
---发送消息
----------------------------------------------------------------------
-- 玩家自己的网络发送函数
function NetWork.Send(myServerId, msgId, subMsgId, sendCmd, err)
    --return LuaNetWorkSendToUser(0,serverId,msgId,subMsgId,sendCmd,err)      -- userId 如果是0的话， 就是给玩家自己回消息 ，这是在go那边定义的
    local buffer = ""
    if sendCmd ~= nil then
        buffer = sendCmd:SerializeToString()
    end

    if err == nil then
        err = ""
    end
    return luaCallGoNetWorkSend(0, myServerId, msgId, subMsgId, buffer, err)       -- 返回结果 true 发送成功  false 发送失败
end




-- 发送消息给其他玩家
function NetWork.SendToUser(userId, msgId, subMsgId, sendCmd, err, token)
    local buffer = ""
    if sendCmd ~= nil then
        buffer = sendCmd:SerializeToString()
    end
    if token == nil then
        token = UserToken       -- 这里为了写方便， 默认nil就是玩家发来的消息的token , 否则就是硬指定的token
    end
    if err == nil then
        err = ""
    end
    -- print("发消息给", userId, msgId, subMsgId)

    -- 统计消息数量
    --local now = GetOsTimeMillisecond()
    --if now - ZswLogShowSendMsgLastTime > 1000 then
    --    ZswLogShowSendMsgLastTime = now
    --    print("1秒发送消息数量", ZswLogShowSendMsgNum)
    --    -- 给服务器一分钟统计提供数据
    --    if ServerStateSendNum == 0 then
    --        ServerStateSendNum = ZswLogShowSendMsgNum   -- 赋值即可
    --    else
    --        ServerStateSendNum =  math.ceil( (ServerStateSendNum+ZswLogShowSendMsgNum)/2 )  -- 求一下平均值
    --    end
    --
    --    ZswLogShowSendMsgNum = 0
    --else
    --    ZswLogShowSendMsgNum = ZswLogShowSendMsgNum + 1       -- 没到一秒就加数量
    --end

    return luaCallGoNetWorkSend(userId, 0, msgId, subMsgId, buffer, err, token)       -- 返回结果 true 发送成功  false 发送失败
end


-- 玩家自己的网络发送函数 udp  clientAddress 是玩家的地址，这个地址需要客户端先注册到服务器才有
function NetWork.SendUdp(clientAddress, msgId, subMsgId, sendCmd, err)
    local buffer = ""
    if sendCmd ~= nil then
        buffer = sendCmd:SerializeToString()
    end
    if err == nil then
        err = ""
    end
    return luaCallGoNetWorkSendUdp(0, clientAddress, msgId, subMsgId, buffer, err)       -- 返回结果 true 发送成功  false 发送失败
end



--连接到其他内部服务器， 返回值是serverId要保存好
function NetWork.ConnectOtherServer(address)
    return luaCallGoNetWorkConnectOtherServer(address)
end
