---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.zhengxh
--- DateTime: 2019/11/27 16:41
---

--------------------------------------------------------------------------------------
---  聊天服务主要依托于该table做游戏的添加(仅一份后期愿景该房间及相关全部删掉
--------------------------------------------------------------------------------------

--- 房间对象
ChatTable = {}
--- 创建房间对象
--- @param roomId      房间ID
--- @param gameTypeId   游戏类型ID
--- @return o           房间对象
function ChatTable:New(roomId, gameTypeId)
    local o = {
        GameID              = gameTypeId,               -- 房间游戏类型(聊天)
        roomId             = roomId,                  -- 房间ID(对于聊天服务永远都为1)
        LoginServerArray    = {},                       -- LoginServer连接列表信息hash[key:serverID,value: loginServerInfo]
        LoginServerNumber   = 0,                        -- 聊天服连接数量
        PlayerTokenArray    = {},                       -- 登录服上传的玩家Token信息，作为玩家连接聊天验证的凭证hash[key:userID,value: token(string)]

        ConfineContentDict  = {},                       -- 字典的形式屏蔽字库
        ConfineContentArray = {},                       -- 屏蔽字库完整字符串ConfineContentArray["傻逼"] = true

        UserCacheArray      = {},                       -- 玩家缓存数据[key:"UserID",Value:User]
        GameIDGetUserIDArray= {},                       -- 玩家缓存数据[key:"GameID",Value:UserID]用于搜索
    }

    setmetatable(o, self)
    self.__index = self
    return o
end

--- 启动房间
function ChatTable:StartTable()
    self:InitTable()
    return
end

--- 初始化房间
function ChatTable:InitTable()
    -- 加载屏蔽字库
    --LoadConfineContent(self.ConfineContentDict, self.ConfineContentArray)
    --self:TestUserCacheArray()
    return
end

--- 重载房间
--- @param o 房间对象
function ChatTable:Reload(o)
    return
end

--- 房间的主循环
function ChatTable:RunTable()
    return
end

----玩家坐到椅子上
function BaseRoom:PlayerSeat(seatID, player)

end

----玩家离开椅子
function ChatTable:PlayerStandUp(seatID,player)
    -- 保存玩家的数据保存
    RedisSavePlayer(player.User)
    -- 保存玩家聊天数据
    RedisSavePlayerChatInfo(player.User.UserID, player.ChatUser)
    -- 清理掉游戏管理的玩家总列表
    SetAllPlayerList(player.User.UserID, nil)
    return
end

-----清理房间
function ChatTable:ClearTable()
    return
end

--- 添加一个登录服连接
--- @param serverID 服务ID
function ChatTable:AddLoginServerLink(serverID)
    -- 构造连接信息
    local loginServerInfo = {
        ServerID        = serverID, -- 连接serverID
        RegisterTime    = os.time() -- 注册时间
    }
    -- 添加到登录服连接列表
    self.LoginServerArray[tostring(serverID)] = loginServerInfo
    -- 服务器连接数增加
    self.LoginServerNumber = self.LoginServerNumber + 1
end

--- 移除一个登录服连接
--- @param serverID 服务ID
function ChatTable:RemoveLoginServerLink(serverID)
    -- 查找登录服连接信息
    if self.LoginServerArray[tostring(serverID)] ~= nil then
        -- 置空
        self.LoginServerArray[tostring(serverID)] = nil
        -- 减少连接数量
        self.LoginServerNumber = self.LoginServerNumber - 1
    end
end

--- 添加一个玩家Token
--- @param userID   用户ID
--- @param token    Token信息
function ChatTable:AddPlayerToken(userID, token)
    self.PlayerTokenArray[tostring(userID)] = token
end

--- 移除一个玩家Token
--- @param userID   用户ID
function ChatTable:RemovePlayerToken(userID, token)
    self.PlayerTokenArray[tostring(userID)] = nil
end

--- 获取玩家登录服上传的token
--- @param userID 用户ID
--- @return sToken
function ChatTable:GetPlayerToken(userID)
    return self.PlayerTokenArray[tostring(userID)]
end

--- 屏蔽字库处理
--- @param strMsg 需要处理的字符串
function ChatTable:DealConfineContent(strMsg)
    local matchArray = {}
    for i = 1, #strMsg do
        local p = i
        local q = p
        local t = self.ConfineContentDict
        while true do
            if not t[string.byte(strMsg,q)] then
                q = q - 1
                break
            end
            t = t[string.byte(strMsg, q)]
            q = q + 1
        end
        if q >= p then
            local str = string.sub(strMsg, p, q)
            if self.ConfineContentArray[str] then
                table.insert(matchArray, {b = p, e = q, l = (q - p + 1)})
            end
        end
    end
    local str = strMsg
    for _,v in ipairs(matchArray) do
        str = string.sub(str, 1, v.b - 1) .. string.rep("*", v.l) .. string.sub(str, v.e + 1)
    end
    return str
end

--- 添加一个玩家缓存信息
--- @param tbUser 玩家用户对象
function ChatTable:SetUserCache(tbUser)
    self.UserCacheArray[tostring(tbUser.UserID)] = tbUser
    self.GameIDGetUserIDArray[tostring(tbUser.GameID)] = tbUser.UserID
end

--- 获取玩家缓存信息
--- @param dwUserID 玩家用户ID
--- @param tbUser 用户对象
function ChatTable:GetUserCache(dwUserID)
    if dwUserID >= 0 then
        return self.UserCacheArray[tostring(dwUserID)]
    end
end

--- 通过GameID获取玩家UserID
--- @param dwGameID 玩家GameID
--- @return 玩家UserID
function ChatTable:GetUserIDByGameID(dwGameID)
    return self.GameIDGetUserIDArray[tostring(dwGameID)]
end

function ChatTable:TestUserCacheArray()
    for i = 2000408, 2009409 do
        local tbUser = User:New()
        LoadUserInfoFromSQLServer(i, tbUser)
        self:SetUserCache(tbUser)
    end
end