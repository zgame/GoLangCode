---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.zhengxh
--- DateTime: 2019/11/28 15:42
---

--------------------------------------------------------------------------------------
--- 玩家搜索用户
--------------------------------------------------------------------------------------

--- 玩家搜索用户
--- @param player   玩家对象
--- @param data     消息数据
function ChatTable:HandleUserSearchPlayer(player, data)
    -- 玩家判定
    if player == nil or player.ChatUser == nil then
        Logger("ChatTable:HandleUserSearchPlayer 玩家不存在")
        return
    end
    local receiveMsg = CMD_GlobalServer_pb.CMD_C_SEARCH_FRIEND()
    receiveMsg:ParseFromString(data)
    -- 搜索关键词
    local searchKey = receiveMsg.key
    -- 返回消息
    local sendMsg = CMD_GlobalServer_pb.CMD_S_SEARCH_FRIEND()
    -- 英文引号返回非法
    if string.find(searchKey, "'") then
        sendMsg.result = Enum_ReplyResult.ContainConfineChar
        LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
        return
    end
    -- 确定玩家是昵称搜索还是GameID搜索
    local dwUserID = self:GetUserIDByGameID(tonumber(searchKey))
    if dwUserID == nil then
        dwUserID = FindUserIDBYSearchKey(searchKey)
    end
    if dwUserID == nil then
        -- 如果Redis中没有找到该key信息从数据库中获取UserID
        dwUserID = LoadUserIDFromSQLServer(searchKey)
    end
    -- UserID判定
    if dwUserID == nil then
        -- 没有找到玩家
        sendMsg.result = Enum_ReplyResult.NotFoundUser
        LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
        return
    end

    -- 是否在我的申请列表
    local dwIndex = player:IsInApplyFriendArray(dwUserID)
    if dwIndex > 0 then
        -- 在我的申请列表
        sendMsg.result = Enum_ReplyResult.ApplyRepeatedly
        LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
        return
    end
    -- 是否在我的被申请列表
    dwIndex = player:IsInBeApplyFriendArray(dwUserID)
    if dwIndex > 0  then
        -- 在我的申请列表
        sendMsg.result = Enum_ReplyResult.ApplyRepeatedly
        LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
        return
    end
    -- 是否在我的好友列表
    dwIndex = player:IsInFriendArray(dwUserID)
    if dwIndex > 0  then
        -- 在我的申请列表
        sendMsg.result = Enum_ReplyResult.FriendExisted
        LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
        return
    end
    -- 被申请人是否在线
    local searchPlayer = GetPlayerByUID(dwUserID)
    local searchUser
    if searchPlayer then
        searchUser = searchPlayer.User
    else
        searchUser = self:GetUserCache(dwUserID)
        if searchUser == nil then
            -- 没有找到玩家
            --sendMsg.result = Enum_ReplyResult.NotFoundUser
            --LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
            --return
            -- 优先取Redis
            searchUser = RedisGetPlayer(dwUserID)
            -- Redis不存在,加载数据库并且写入Redis玩家数据中
            if searchUser.UserID ~= dwUserID then
                -- 存入该玩家信息到Redis
                local tbChatUserInfo = ChatUser:New()
                LoadPlayerInfoAndSaveToRedis(dwUserID, searchUser, tbChatUserInfo)
                -- 加入缓存信息中
                self:SetUserCache(searchUser)
            end
        end
    end
    -- 返回找到的玩家信息
    sendMsg.result = Enum_ReplyResult.Successful
    local searchFriend = sendMsg.user_list:add()
    searchFriend.user_id           = searchUser.UserID         -- 用户ID
    searchFriend.game_id           = searchUser.GameID		   -- 游戏ID
    searchFriend.face_id           = searchUser.FaceID		   -- 头像ID
    searchFriend.vip_lev           = searchUser.VipLev		   -- vip等级
    searchFriend.nick              = searchUser.NickName	   -- 昵称
    LuaNetWorkSendToUser(player.User.UserID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil)
    return
end
--------------------------------------------------------------------------------------