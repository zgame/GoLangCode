---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.zhengxh
--- DateTime: 2019/10/29 14:56
---

--------------------------------------------------------------------------------------
--- 游戏桌子的基类
--------------------------------------------------------------------------------------

--- 桌子对象
BaseTable = {}
--- 创建桌子对象
--- @param tableId      桌子ID
--- @param gameTypeId   游戏类型ID
--- @param tableMax     桌子最大人数
--- @return o桌子对象
function BaseTable:New()
    o = {
        GameID              = 0,                    -- 游戏类型ID
        TableID             = 0,                    -- 桌子ID
        TableMax            = 0,                    -- 桌子最大容纳玩家数量
        RoomScore           = 0,                    -- 房间低分
        UserSeatArray       = {},                   -- 椅子[座椅对应玩家uid的哈希表 ， key ： seatID (1,2,3,4)   ，value： player]
        UserSeatArrayNumber = 0,                    -- 桌子上有几个玩家， 记住，这里不能用#UserSeatArray, 因为有可能中间有椅子是空的，不连续的不能用#， 本质UserSeatArray是map ；  也不能遍历， 慢
        LastRunTime         = 0                     -- 循环周期时间
    }
    setmetatable(o, self)
    self.__index = self
    return o
end

--- 重载桌子
--- @param o 桌子对象
function BaseTable:Reload(o)
    Logger("调用了BaseTable:Reload()")
    -- 如果热更新有改动成员变量的定义的话， 下面需要进行成员变量的处理
    -- 比如 1 增加了字段， 那么你需要将老数据进行， 新字段的初始化
    -- 比如 2 删除了字段， 那么你需要将老数据进行， 老字段=nil
    -- 比如 3 修改了字段， 那么你需要将老数据进行， 老字段=nil， 新字段初始化或者进行赋值处理
end

--- 桌子的主循环
function BaseTable:RunTable()
    print("桌子基类主循环")
end

-----判断桌子是有人，还是空桌子
function BaseTable:CheckTableEmpty()
    if self.UserSeatArrayNumber > 0 then
        return false
    end

    return true -- 空桌子
end

-----获取桌子的空座位, 返回座椅的编号，从0开始到tableMax， 如果返回-1说明满了-
function BaseTable:GetEmptySeatInTable()
    for i=1,self.TableMax do
        if self.UserSeatArray[i] == nil then
            return i
        end
    end
    return -1
end

----玩家坐到椅子上
function BaseTable:PlayerSeat(seatID,player)
    self.UserSeatArray[seatID] = player
    self.UserSeatArrayNumber = self.UserSeatArrayNumber + 1   -- 桌子上玩家数量增加
end

----玩家离开椅子
function BaseTable:PlayerStandUp(seatID,player)
    Logger(player.User.UserID.."离开桌子"..player.TableID.."椅子"..player.ChairID.."self.TableID"..self.GameID)
    -- 保存玩家基础数据
    SaveUserBaseData(player.User)

    SetAllPlayerList(player.User.UserID, nil)         -- 清理掉游戏管理的玩家总列表
    self.UserSeatArray[seatID] = nil                -- 清理掉桌子的玩家列表
    self.UserSeatArrayNumber = self.UserSeatArrayNumber - 1  -- 桌子上玩家数量减少
    player.TableID = TABLE_CHAIR_NOBODY
    player.ChairID = TABLE_CHAIR_NOBODY
end

-----清理桌子
function BaseTable:ClearTable()
    self.UserSeatArray = {}     --  seatID    player
end


-----给桌上的所有玩家同步消息
function BaseTable:SendMsgToAllUsers(mainCmd,subCmd,sendCmd)
    for _,player in pairs(self.UserSeatArray) do
        if player ~= nil and player.IsRobot == false and player.NetWorkState then
            --LuaNetWorkSendToUser(player.User.UserID,mainCmd,subCmd,sendCmd,nil)
            local result = LuaNetWorkSendToUser(player.User.UserID,mainCmd,subCmd,sendCmd,nil, 0)       -- 注意，这里因为是群发，所以token标记是0，就是不需要
            if not result then
                -- 发送失败了，玩家网络中断了
                --player.NetWorkState = false
                --player.NetWorkCloseTimer = GetOsTimeMillisecond()
                self:PlayerStandUp(player.ChairID,player)
            end
        end
    end
end

----给桌上的其他玩家同步消息
function BaseTable:SendMsgToOtherUsers(userId,sendCmd,mainCmd,subCmd)
    for _,player in pairs(self.UserSeatArray) do
        if player ~= nil and player.IsRobot == false and userId ~= player.User.UserID and player.NetWorkState then
            LuaNetWorkSendToUser(player.User.UserID,mainCmd,subCmd,sendCmd,nil, 0)       -- 注意，这里因为是群发，所以token标记是0，就是不需要
        end
    end
end
