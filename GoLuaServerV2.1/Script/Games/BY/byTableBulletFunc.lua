---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/12/27 10:18
---




--------------------------------------------------------------------------------
----------------------桌子逻辑关于 子弹 的处理----------------------------------
--------------------------------------------------------------------------------
---
-----玩家发射一个新的子弹
function ByTable:HandleUserFire(player , lockFishId)
    --print("玩家发射一个子弹")

    local num = player.ActivityBulletNum
    --    if num > MAX_BULLET_NUMBER then
    ----        print("子弹超过上限了")
    --        LuaNetWorkSendToUser(player.User.UserID,MDM_GF_GAME, SUB_S_USER_FIRE,nil,"子弹超过上限了")
    --        return
    --    end
    local cost = self.RoomScore
    if player.User.Score < cost then
        print("玩家没钱了")
        LuaNetWorkSendToUser(player.User.UserID,MDM_GF_GAME, SUB_S_USER_FIRE,nil,"玩家没钱了", nil)
        return
    end
    -- 创建新的子弹
    local bullet = Bullet:New(self.GenerateBulletUid)
    --self.BulletArray[bullet.BulletUID] = bullet     --把bullet加入列表
    self:SetBulletArray(bullet.BulletUID,bullet)        --把bullet加入列表
    bullet.UserID = player.User.UserID              --子弹的主人
    bullet.lockFishID = lockFishId                  --锁定鱼
    player.ActivityBulletNum = player.ActivityBulletNum + 1  --玩家已激活子弹增加
    self.GenerateBulletUid  = self.GenerateBulletUid + 1        -- 生成子弹id，自增


    -- 给所有玩家同步一下，这个玩家发子弹了
    local sendCmd = CMD_Game_pb.CMD_S_USER_FIRE()
    sendCmd.chair_id = player.ChairID
    sendCmd.bullet_id = bullet.BulletUID
    sendCmd.lock_fish_id = lockFishId
    --sendCmd.curr_score = player.User.Score

    --self:SendMsgToAllUsers(MDM_GF_GAME, SUB_S_USER_FIRE,sendCmd)
    LuaNetWorkSendToUser(player.User.UserID,MDM_GF_GAME, SUB_S_USER_FIRE,sendCmd,nil, nil)     -- 回复给玩家
    self:SendMsgToOtherUsers(player.User.UserID, sendCmd, MDM_GF_GAME, SUB_S_USER_FIRE)                -- 同步其他人


end

-- 获取子弹
function ByTable:GetBullet(bulletId)
    return self.BulletArray[tostring(bulletId)]
end
-- 把子弹加入列表或者删除
function ByTable:SetBulletArray(bulletId,value)
    self.BulletArray[tostring(bulletId)] = value
    if value == nil then
        self.BulletArrayNumber = self.BulletArrayNumber - 1     -- 减少数量
    else
        self.BulletArrayNumber = self.BulletArrayNumber + 1
    end
end


----删除特定id的子弹
function ByTable:DelBullet(bulletId)
    if self:GetBullet(bulletId) ~= nil then
        --self.BulletArray[bulletId] = nil
        self:SetBulletArray(bulletId, nil)
    end
    if self:GetBulletNum() == 0 then
        self.GenerateBulletUid = 0  --重置一下生成子弹uuid
    end
end

---- 删除所有子弹， 1 如果传入玩家uid，删除玩家的  ； 2  如果传入 -1 ，那么删除所有的
function ByTable:DelBullets(userId)
    if userId == -1 then        -- 全部清空
        self.BulletArray = {}
        self.BulletArrayNumber = 0
        return
    end
    for bulletId, bullet in pairs(self.BulletArray) do
        if bullet.UserID == userId then
            --self.BulletArray[k] = nil
            self:SetBulletArray(bulletId,nil)
        end
    end
    if self:GetBulletNum() == 0 then
        self.GenerateBulletUid = 0  --重置一下生成子弹uuid
    end
end

---- 有多少子弹
function ByTable:GetBulletNum()
    return self.BulletArrayNumber
end