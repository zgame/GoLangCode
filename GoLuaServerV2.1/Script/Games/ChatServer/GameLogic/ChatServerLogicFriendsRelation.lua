---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/11/15 17:40

---  客户端请求处理好友关系


--- 找玩家列表
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:ClientSubGetFriendListAction(serverId, userId, data, token)
    local sendMsg = CMD_GlobalServer_pb.CMD_S_FRIEND_LIST();
    local tUserInfoOnline = self.UserMgr:FindUserInfoPtrByUserID(userId);
    local tFriends = self.FriendMgr:GetFriendRelation(userId);
    if tUserInfoOnline == nil or tFriends == nil then
        print(string.format("ClientSubGetFriendListAction:玩家[%d]不在线或者好友关系tFriends=nil",userId));
        return false;
    end
    local tFriendUID = tFriends:GetFriendList();
    if tFriendUID ~= nil then
        --生成好友列表
        for dwFriendUID,value in pairs(tFriendUID) do
            if value then
                local tFriendInfo = self.UserMgr:GetExistUserInfo(dwFriendUID);
                if tFriendInfo and next(tFriendInfo)  then
                    local tMsgFriendInfo = sendMsg.friend_list:add();
                    tMsgFriendInfo.user_info.user_id = tFriendInfo.UserId;
                    tMsgFriendInfo.user_info.game_id = tFriendInfo.GameId;
                    tMsgFriendInfo.user_info.face_id = tFriendInfo.FaceId;
                    tMsgFriendInfo.user_info.vip_lev = tFriendInfo.VipLevel;
                    tMsgFriendInfo.user_info.nick = tFriendInfo.NickName;
                    tMsgFriendInfo.user_info.guild_id = tFriendInfo.GuildID;
                    tMsgFriendInfo.user_info.guild_name = tFriendInfo.GuildName;
                    tMsgFriendInfo.user_info.off_line_time = tFriendInfo.llOffLineTime;
                    local tFriendInfoOnline = self.UserMgr:FindUserInfoPtrByUserID(dwFriendUID);
                    if tFriendInfoOnline ~= nil then
                        tMsgFriendInfo.user_info.Is_on_line = true;
                    else
                        tMsgFriendInfo.user_info.Is_on_line = false;
                    end
                    tMsgFriendInfo.unread_count = self.FriendMgr:GetFreindUnreadCount(userId,tFriendInfo.UserId);
                    tMsgFriendInfo.message_time = self.FriendMgr:GetFriendUnreadMsgTime(userId,tFriendInfo.UserId);
                end
            end
        end
    end
    ---生成申请好友的列表以及被申请好友的列表
    local tApplyList = {};
    local tBeApplyList  = {};
    local tApplyListAll = tFriends:GetApplyFriendList();
    if tApplyListAll ~= nil then
        for tApplyUID,llApplyTime in pairs(tApplyListAll) do
            local tApplyInfo = {
                ["dwUserID"] = tApplyUID,
                ["uTimes"] = llApplyTime,
            };
            table.insert(tApplyList,tApplyInfo);
        end
    end
    local tBeApplyListAll = tFriends:GetBeAppliedForFriendList();
    if tBeApplyListAll ~= nil then
        for tApplyUID,llApplyTime in pairs(tBeApplyListAll) do
            local tApplyInfo = {
                ["dwUserID"] = tApplyUID,
                ["uTimes"] = llApplyTime,
            };
            table.insert(tBeApplyList,tApplyInfo);
        end
    end
    --需要对tApplyList和tBeApplyList进行排序，最多同步40条数据到前端
    local function sortApplyList(tApplyInfo1,tApplyInfo2)
        return tApplyInfo1.uTimes > tApplyInfo2.uTimes;
    end
    table.sort(tApplyList,sortApplyList);
    table.sort(tBeApplyList,sortApplyList);
    local applyNum = #tApplyList;
    local beApplyNum = #tBeApplyList;
    if applyNum < MAX_FRIEND_APPLY_NUM then
        beApplyNum = MAX_FRIEND_APPLY_NUM + MAX_FRIEND_APPLY_NUM - applyNum;
    elseif beApplyNum < MAX_FRIEND_APPLY_NUM then
        applyNum = MAX_FRIEND_APPLY_NUM + MAX_FRIEND_APPLY_NUM - beApplyNum;
    else
        beApplyNum = MAX_FRIEND_APPLY_NUM;
        applyNum = MAX_FRIEND_APPLY_NUM;
    end
    local nApplyCount = 0;
    for _,applyInfo in ipairs(tApplyList) do
        --- 这里要查询存在的用户
        local tFriendInfo = self.UserMgr:GetExistUserInfo(applyInfo.dwUserID);
        if tFriendInfo ~= nil and next(tFriendInfo) ~= nil   and  nApplyCount < applyNum then
            nApplyCount = nApplyCount + 1;
            local tMsgFriendInfo = sendMsg.apply_list:add();
            tMsgFriendInfo.user_id = tFriendInfo.UserId;
            tMsgFriendInfo.game_id = tFriendInfo.GameId;
            tMsgFriendInfo.face_id = tFriendInfo.FaceId;
            tMsgFriendInfo.vip_lev = tFriendInfo.VipLevel;
            tMsgFriendInfo.nick = tFriendInfo.NickName;
            tMsgFriendInfo.guild_id = tFriendInfo.GuildID;
            tMsgFriendInfo.guild_name = tFriendInfo.GuildName;
        end
    end
    nApplyCount = 0;
    for _,applyInfo in ipairs(tBeApplyList) do
        local tFriendInfo = self.UserMgr:GetExistUserInfo(applyInfo.dwUserID);
        if tFriendInfo ~= nil and next(tFriendInfo) ~= nil and  nApplyCount < beApplyNum then
            nApplyCount = nApplyCount + 1;
            local tMsgFriendInfo = sendMsg.be_applied_list:add();
            tMsgFriendInfo.user_id = tFriendInfo.UserId;
            tMsgFriendInfo.game_id = tFriendInfo.GameId;
            tMsgFriendInfo.face_id = tFriendInfo.FaceId;
            tMsgFriendInfo.vip_lev = tFriendInfo.VipLevel;
            tMsgFriendInfo.nick = tFriendInfo.NickName;
            tMsgFriendInfo.guild_id = tFriendInfo.GuildID;
            tMsgFriendInfo.guild_name = tFriendInfo.GuildName;
        end
    end
    LuaNetWorkSendToUser(userId, MAIN_CHAT_SERVICE_CLIENT, SUB_S_FRIEND_LIST, sendMsg, nil);

end
-- 查找用户
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:ClientSubSearchUserAction(serverId, userId, data, token)
    ---print(string.format("ChatServerFace:ClientSubSearchUserAction:收到消息serverId=[%d],userId=[%d]", serverId, userId));
    local resMsg = CMD_GlobalServer_pb.CMD_C_SEARCH_FRIEND();
    resMsg:ParseFromString(data)
    --print(resMsg);
    local tUserInfo = self.UserMgr:FindUserInfoPtrByUserID(userId);
    if tUserInfo == nil then
        print(string.format("ClientSubSearchUserAction:玩家[%d]不在线",userId));
        return false;
    end
    local bCanSearchUser = ChatServerUserInfo.CanSearchUser(tUserInfo,SearchInverval);
    if not bCanSearchUser then
        --if not tUserInfo:CanSearchUser(SearchInverval) then
        print(string.format("ClientSubSearchUserAction:玩家[%d]还不能查询玩家",userId));
        return false;
    end
    local sKey = resMsg.key;
    local sendMsg = CMD_GlobalServer_pb.CMD_S_SEARCH_FRIEND();
    --如果含有非法字符，则提示错误
    if string.find(sKey,"'",1,true) then
        sendMsg.result = Enum_ReplyResult.ContainConfineChar
        --print("-----sendMsg.result ="..sendMsg.result)
        LuaNetWorkSendToUser(userId, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil);
        return true;
    end
    local nSearchGameID = tonumber(sKey);
    if nSearchGameID then
        ----这里添加按照GameID查找的逻辑
        local tRedisData = self.UserMgr:GetUserInfo(nSearchGameID);
        if tRedisData ~= nil  and next(tRedisData)  then
            local tUserInfoMsg = sendMsg.user_list:add();
            tUserInfoMsg.user_id = tRedisData.UserId;
            tUserInfoMsg.game_id = tRedisData.GameId;
            tUserInfoMsg.face_id = tRedisData.FaceId;
            tUserInfoMsg.vip_lev = tRedisData.VipLevel;
            tUserInfoMsg.nick = tRedisData.NickName;
            tUserInfoMsg.guild_id = tRedisData.GuildID;
            tUserInfoMsg.guild_name = tRedisData.GuildName;
        end
    elseif string.len(sKey) > 0 then
        ---这里添加按照昵称查找的逻辑
        local tRedisData = self.UserMgr:GetUserInfo(nil,sKey);
        if tRedisData ~= nil  and next(tRedisData)  then
            --printTable(tRedisData,0,"tRedisData")
            local tUserInfoMsg = sendMsg.user_list:add();
            tUserInfoMsg.user_id = tRedisData.UserId;
            tUserInfoMsg.game_id = tRedisData.GameId;
            tUserInfoMsg.face_id = tRedisData.FaceId;
            tUserInfoMsg.vip_lev = tRedisData.VipLevel;
            tUserInfoMsg.nick = tRedisData.NickName;
            tUserInfoMsg.guild_id = tRedisData.GuildID;
            tUserInfoMsg.guild_name = tRedisData.GuildName;
        end
    else
        ---这里推送10个在线玩家过去
        local iCount = 0;
        local tOnLineUserList = self.UserMgr:GetOnlineUserList();
        for sUserOnLineID,tUserOnLineInfo in pairs(tOnLineUserList) do
            if iCount >= 10 then
                break;
            end
            local dwUserOnLineID = tonumber(sUserOnLineID);
            if dwUserOnLineID and dwUserOnLineID ~= userId then---排除自己
            local tTargetFriends = self.FriendMgr:GetFriendRelation(dwUserOnLineID);
                if tTargetFriends ~= nil and not tTargetFriends:IsExistedApplyFriend(userId) and not tTargetFriends:IsExistedBeAppliedForFriend(userId) and not tTargetFriends:IsExistedFriend(userId) then
                    local tUserInfoMsg = sendMsg.user_list:add();
                    tUserInfoMsg.user_id = dwUserOnLineID;
                    tUserInfoMsg.game_id = tUserOnLineInfo.GameId;
                    tUserInfoMsg.face_id = tUserOnLineInfo.FaceId;
                    tUserInfoMsg.vip_lev = tUserOnLineInfo.VipLevel;
                    tUserInfoMsg.nick = tUserOnLineInfo.NickName;
                    tUserInfoMsg.guild_id = tUserOnLineInfo.GuildID;
                    tUserInfoMsg.guild_name = tUserOnLineInfo.GuildName;
                    iCount = iCount + 1
                end
            end
        end
    end
    if sendMsg:ByteSize() <= 0 then
        sendMsg.result =  Enum_ReplyResult.NotFoundUser
    else
        sendMsg.result =  Enum_ReplyResult.Successful
    end
    LuaNetWorkSendToUser(userId, MAIN_CHAT_SERVICE_CLIENT, SUB_S_SEARCH_USER, sendMsg, nil);
    return true;
end

--删除好友
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:ClientSubDeleteFriendAction(serverId, userId, data, token)

    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userId)
    if userInfo == nil then
        return false
    end
    local friendRelation = self.FriendMgr:GetFriendRelation(userId)
    if friendRelation == nil then
        return false
    end
    local recvMsg =  CMD_GlobalServer_pb.CMD_C_DELETE_FRIEND()
    recvMsg:ParseFromString(data)
    if recvMsg.req_user_id ~= userId then
        return false
    end
    ---好友ID
    local nFriendID = recvMsg.friend_user_id
    --- 不会存在自己删自己
    if nFriendID == userId then
        return false
    end
    ---构造发送消息
    local sendMsg =  CMD_GlobalServer_pb.CMD_S_DELETE_FRIEND()
    sendMsg.req_user_id = userId
    sendMsg.friend_user_id = nFriendID
    if friendRelation:DeleteFriend(nFriendID) then  -- 删除成功
        --- print("ClientSubDeleteFriendAction")
        --- 相互清空未读消息缓存 清除 申请删除好友的消息
        local messageCache = self.FriendMgr:GetUnreadMessageCache(userId)
        if messageCache ~= nil then
            messageCache:FetchUnreadMessage(nFriendID)
        end
        ---  对方删除自己的缓存消息
        messageCache = self.FriendMgr:GetUnreadMessageCache(nFriendID)
        if messageCache ~= nil then
            messageCache:FetchUnreadMessage(userId)
        end
        --- 如果玩家好友信息存在，删除好友关系
        local targetFriends = self.FriendMgr:GetFriendRelation(nFriendID)
        if targetFriends ~= nil then
            targetFriends:DeleteFriend(userId)
        end
        sendMsg.result = Enum_ReplyResult.Successful

        --- 查找对方是否在线 给对方发送消息
        local friendUserInfo = self.UserMgr:FindUserInfoPtrByUserID(nFriendID)
        if friendUserInfo ~= nil then
            LuaNetWorkSendToUser(nFriendID, MAIN_CHAT_SERVICE_CLIENT, SUB_S_DELETE_FRIEND, sendMsg)
        end
        --- 更新数据库
        self:OnDeleteFriend(userId,nFriendID)
    else
        sendMsg.result = Enum_ReplyResult.Failed
    end
    -- 发送消息
    LuaNetWorkSendToUser(userId, MAIN_CHAT_SERVICE_CLIENT, SUB_S_DELETE_FRIEND, sendMsg)
end