--- 好友关系逻辑处理  客户端请求 添加同意
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/10/29 17:57
---

--------------------好友关系逻辑处理  客户端请求 添加同意 ===================

--- 申请时如果好友关系为空时查询
function ChatServerLogic:ApplyFriendRelationIsNullQueryDB(userid, apply, nFriendCountMax)

    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id
    ---从数据库中查找被申请好友的数量
    local dbres = self:OnSearchOtherFriendCount(nBeAppliedID)
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userid)
    local applyres = nil
    if userInfo == nil then
        print("userInfo nil")
        return applyres
    end
    --- 查询被申请玩家信息
    local pFriendInfo = self.UserMgr:GetExistUserInfo(nBeAppliedID)
    if pFriendInfo == nil then
        print("ApplyFriendRelationIsNullQueryDB查询被申请玩家信息 nil ", nBeAppliedID)
        return applyres
    end
    --- 被申请玩家被删除的好友数量
    local BeAppiedUserfriendnum = 0
    if dbres ~= nil and next(dbres) then
        BeAppiedUserfriendnum = dbres[1].num
    end

    if BeAppiedUserfriendnum >= nFriendCountMax then
        applyres = Enum_ReplyResult.OtherFriendFull
        local friendRelation = self.FriendMgr:GetFriendRelation(nApplyID)
        if friendRelation ~= nil then
            friendRelation:DeleteApplyFriend(nBeAppliedID)  --- 请求玩家删除申请信息
        end
        print("被申请人好友数量超标")
        return applyres
    end
    --- 异步代码这里在查询了一次被申请好友关系
    local BefriendRelation = self.FriendMgr:GetFriendRelation(nBeAppliedID)
    if BefriendRelation ~= nil then
        --- 被申请人添加申请人信息
        BefriendRelation:AddBeAppliedForFriend(nApplyID, os.time())
        --- print("ApplyFriendRelationIsNullQueryDB  添加申请人关系")
    end
    ---如果对方在线，通知对方
    if self.UserMgr:FindUserInfoPtrByUserID(nBeAppliedID) ~= nil then
        self:SendApplyFriendResult(nBeAppliedID, apply, applyres, userInfo)
    end
    applyres = Enum_ReplyResult.Successful
    self:SendApplyFriendResult(userid, apply, applyres, userInfo)
    --- 更新数据库信息
    local DBR = {}
    DBR.ApplyID = nApplyID
    DBR.BeAppliedID = nBeAppliedID
    DBR.Status = apply.opt
    self:OnUpdateApplyFriendStatus(DBR)
    return applyres
end

--- 同意时如果好友关系为空时查询
function ChatServerLogic:AgreeFriendRelationIsNullQueryDB(userid, apply, nFriendCountMax)
    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userid)
    local applyres = nil
    if userInfo == nil then
        print("AgreeFriendRelationIsNullQueryDB  用户信息为空")
        return applyres
    end
    local friendRelation = self.FriendMgr:GetFriendRelation(userid)
    if friendRelation == nil then
        print("AgreeFriendRelationIsNullQueryDB  好友关系为空")
        return applyres
    end
    ---从数据库中查找被删除好友的数量
    local dbres = self:OnSearchOtherFriendCount(nApplyID)
    --- 被申请玩家被删除的好友数量
    local ApplyUserfriendnum = 0
    if dbres ~= nil and next(dbres) then
        ApplyUserfriendnum = dbres[1].num
    end
    --- 数据库 数量超过 好友最大值
    if ApplyUserfriendnum >= nFriendCountMax then
        print("AgreeFriendRelationIsNullQueryDB  同意申请人的好友数量满了")
        applyres = Enum_ReplyResult.OtherFriendFull
        return applyres
    end
    --- 异步代码这里在查询了一次申请好友关系
    local ApplyRelation = self.FriendMgr:GetFriendRelation(nApplyID)
    if ApplyRelation ~= nil then
        --- 被申请人添加申请人信息
        ApplyRelation:DeleteApplyFriend(userid)
        ApplyRelation:AddFriend(nBeAppliedID)
    end
    ---如果对方在线，通知对方
    if self.UserMgr:FindUserInfoPtrByUserID(nApplyID) ~= nil then
        self:SendApplyFriendResult(nApplyID, apply, applyres, userInfo)
    end
    applyres = Enum_ReplyResult.Successful
    friendRelation:AddFriend(nApplyID)
    --- 将添加好友数据库
    local DB = {}
    DB.userid = nApplyID
    DB.fiendid = nBeAppliedID
    self:OnAddFriend(DB)
    --- 给自己发送结果
    self:SendApplyFriendResult(userid, apply, applyres, userInfo)
    --- 更新关系信息
    local DBR = {}
    DBR.ApplyID = nApplyID
    DBR.BeAppliedID = nBeAppliedID
    DBR.Status = apply.opt
    self:OnUpdateApplyFriendStatus(DBR)
    return applyres
end

---好友请求相关公共方法 所有的相关的结果返回都走这个方法
---@param sendtoUserid number发给谁的消息
---@param apply ApplyFiend请求的信息protobuf定义的结构体
---@param userInfo ChatServerUserInfo
---@param res ReplyResult枚举protobuf
function ChatServerLogic:SendApplyFriendResult(sendtoUserid, apply, res, userInfo)
    local sendMsg = CMD_GlobalServer_pb.CMD_S_APPLY_FRIEND_RESULT()
    --- 申请相关结构
    sendMsg.apply.apply_id = apply.apply_id
    sendMsg.apply.be_applied_id = apply.be_applied_id
    sendMsg.apply.opt = apply.opt
    --- 申请用户的信息
    if userInfo ~= nil then
        sendMsg.apply_info.user_id = userInfo.UserId
        sendMsg.apply_info.game_id = userInfo.GameId
        sendMsg.apply_info.face_id = userInfo.FaceId
        sendMsg.apply_info.vip_lev = userInfo.VipLevel
        sendMsg.apply_info.nick = userInfo.NickName
        sendMsg.apply_info.guild_id = userInfo.GuildID
        sendMsg.apply_info.guild_name = userInfo.GuildName
        sendMsg.apply_info.off_line_time = userInfo.llOffLineTime
    end
    --- 结果
    if res ~= nil then
        sendMsg.result = res
    end
    ---如果对方在线，通知对方
    LuaNetWorkSendToUser(sendtoUserid, MAIN_CHAT_SERVICE_CLIENT, SUB_S_APPLY_FRIEND_RESULT, sendMsg, nil)
end

--- 申请相关逻辑处理
---@param apply protobuf的消息　ApplyFiend
---@param userId number用户id
function ChatServerLogic:ApplyFriendAction(apply, userId)
    --- 操作结果
    local applyres = nil
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userId)
    if userInfo == nil then
        return applyres
    end
    local friendRelation = self.FriendMgr:GetFriendRelation(userId)
    if friendRelation == nil then
        return applyres
    end
    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id

    --- 申请人是否是自己
    if nApplyID ~= userId then
        print("ApplyFriendAction申请人不是自己 nApplyID=", nApplyID, "userId=", userId)
        return applyres
    end

    repeat --- 单个条件验证不过跳至 until 后面
        --- 检查申请列表数量是否达到上限
        if friendRelation:GetApplyFriendListNum() >= ApplyFriendListNum then
            applyres = Enum_ReplyResult.ApplyUpperLimit
            break
        end
        --- 当前时间
        local currentTime = os.time()
        local nFriendCountMax = GetFriendMaxNumByVipLv(userInfo.VipLevel)
        ---好友数量判断
        if friendRelation:GetFriendNum() >= nFriendCountMax then
            applyres = Enum_ReplyResult.FriendUpperLimit
            break --- 跳出repeat
        end
        --- 已经是好友
        if friendRelation:IsExistedFriend(nBeAppliedID) then
            applyres = Enum_ReplyResult.FriendExisted
            break --- 跳出repeat
        end
        --- 如果被申请人已在申请列表，失败
        if not friendRelation:AddApplyFriend(nBeAppliedID, currentTime) then
            print("ApplyFriendAction 被申请人已经在列表中")
            applyres = Enum_ReplyResult.ApplyRepeatedly
            break --- 跳出repeat
        end

        --- 获取被申请人用户信息先不管在不在线
        local BeuserInfo = self.UserMgr:GetExistUserInfo(nBeAppliedID)
        if BeuserInfo == nil then
            applyres = Enum_ReplyResult.Failed
            print("ApplyFriendAction 没有找到 被申请用户信息")
            break --- 跳出repeat
        end
        ---好友数量判断
        nFriendCountMax = GetFriendMaxNumByVipLv(BeuserInfo.VipLevel)
        local BefriendRelation = self.FriendMgr:GetFriendRelation(nBeAppliedID)
        --- 被申请玩家没有在线
        if BefriendRelation == nil then
            --region  这里主版本是异步操作所以要去查询玩家的好友数量
            self:ApplyFriendRelationIsNullQueryDB(userId, apply, nFriendCountMax)
            --- 这里直接返回
            return applyres
            --endregion
        end

        --- 超过数量
        if BefriendRelation:GetFriendNum() >= nFriendCountMax then
            applyres = Enum_ReplyResult.OtherFriendFull
            friendRelation:DeleteApplyFriend(nBeAppliedID)
            --- 请求玩家删除申请信息
            break --- 跳出repeat
        end
        ---print("BefriendRelation:AddBeAppliedForFriend =",nApplyID,"nBeAppliedID=",nBeAppliedID)
        --- 被申请人添加申请人信息
        BefriendRelation:AddBeAppliedForFriend(userId, currentTime)
        ---如果对方在线，通知对方
        if self.UserMgr:FindUserInfoPtrByUserID(nBeAppliedID) then
            self:SendApplyFriendResult(nBeAppliedID, apply, applyres, userInfo)
        end
        applyres = Enum_ReplyResult.Successful
    until true
    -- 给自己返回结果
    self:SendApplyFriendResult(userId, apply, applyres, userInfo)
    return applyres
end

--- 取消请求
---@param apply protobuf的消息　ApplyFiend
---@param userId number用户id
function ChatServerLogic:CancelFriendRelation(apply, userId)
    ---print("CancelFriendRelation", apply.opt,userId)
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userId)
    local applyres = nil
    if userInfo == nil then
        print("CancelFriendRelation 未找到自己")
        return applyres
    end
    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id
    ---  申请人是否是自己
    if nApplyID ~= userId then
        print("CancelFriendRelation 申请人不是自己")
        return applyres
    end

    local friendRelation = self.FriendMgr:GetFriendRelation(userId)
    if friendRelation == nil then
        print("CancelFriendRelation未找到自己的好友关系")
        return applyres
    end

    --- 如果被申请人不在申请列表，失败
    if not friendRelation:DeleteApplyFriend(nBeAppliedID) then
        print("CancelFriendRelation 如果被申请人不在申请列表")
        applyres = Enum_ReplyResult.Failed
    else
        --- 对方在线从对方的被申请好友列表移除信息
        local beFriendRelation = self.FriendMgr:GetFriendRelation(nBeAppliedID)
        if beFriendRelation then
            beFriendRelation:DeleteBeAppliedForFriend(userId)
        end
        --- 对方在线通知对方
        if self.UserMgr:FindUserInfoPtrByUserID(nBeAppliedID) then
            self:SendApplyFriendResult(nBeAppliedID, apply, applyres, nil)
        end
        applyres = Enum_ReplyResult.Successful
    end
    self:SendApplyFriendResult(userId, apply, applyres, nil)
    return applyres
end

--- 同意
---@param apply protobuf的消息　ApplyFiend
---@param userId number用户id
function ChatServerLogic:AgreeFriendRelation(apply, userId)
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userId)
    local applyres = nil
    if userInfo == nil then
        print("AgreeFriendRelation 用户没有在线")
        return applyres
    end
    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id
    ---  被申请人是否是自己
    if nBeAppliedID ~= userId then
        print("AgreeFriendRelation 被申请人不是自己 ")
        return applyres
    end

    local friendRelation = self.FriendMgr:GetFriendRelation(userId)
    if friendRelation == nil then
        print("AgreeFriendRelation 没有找到自己的好友关系 ")
        return applyres
    end

    repeat --- 单个条件验证不过跳至 until 后面
        --- 如果申请人不在被申请列表，失败
        if not friendRelation:DeleteBeAppliedForFriend(nApplyID) then
            print("AgreeFriendRelation 申请人不在被申请列表 ")
            applyres = Enum_ReplyResult.Failed
            break
        end
        local nFriendCountMax = GetFriendMaxNumByVipLv(userInfo.VipLevel)
        if friendRelation:GetFriendNum() >= nFriendCountMax then
            applyres = Enum_ReplyResult.FriendUpperLimit
            break --- 跳出repeat
        end

        local ApplyInfo = self.UserMgr:GetExistUserInfo(userId)
        local viplv = 0
        if ApplyInfo then
            viplv = ApplyInfo.VipLevel
        end
        --- 检查申请人玩家信息
        nFriendCountMax = GetFriendMaxNumByVipLv(viplv)
        local applyRelation = self.FriendMgr:GetFriendRelation(nApplyID)
        if applyRelation == nil then
            print("AgreeFriendRelation 对方没有在线 ")
            --region  这里主版本是异步操作所以要去查询玩家的好友数量
            self:AgreeFriendRelationIsNullQueryDB(userId, apply, nFriendCountMax)
            --- 这里直接返回
            return applyres
            --endregion
        end
        --- 检查申请人玩家 好友数量
        if applyRelation:GetFriendNum() >= nFriendCountMax then
            applyres = Enum_ReplyResult.OtherFriendFull
            break --- 跳出repeat
        end
        --- 将自己从对方的被申请好友列表移除信息
        applyRelation:DeleteApplyFriend(userId)
        applyRelation:AddFriend(nBeAppliedID)
        ---  如果对方在线，通知对方
        if self.UserMgr:FindUserInfoPtrByUserID(nApplyID) ~= nil then
            self:SendApplyFriendResult(nApplyID, apply, applyres, nil)
        end
        --- 添加好友
        friendRelation:AddFriend(nApplyID)
        --- 将好友关系写入数据库
        local DBR = {}
        DBR.userid = nApplyID
        DBR.fiendid = nBeAppliedID
        self:OnAddFriend(DBR)
        applyres = Enum_ReplyResult.Successful
    until true
    self:SendApplyFriendResult(userId, apply, applyres, nil)
    return applyres
end

--- 拒绝好友申请
---@param apply protobuf的消息　ApplyFiend
---@param userId number用户id
function ChatServerLogic:RefuseFriendRelation(apply, userId)
    local userInfo = self.UserMgr:FindUserInfoPtrByUserID(userId)
    local applyres = nil
    if userInfo == nil then
        return applyres
    end
    local nApplyID = apply.apply_id
    local nBeAppliedID = apply.be_applied_id
    ---  被申请人是否是自己
    if nBeAppliedID ~= userId then
        print("被申请人 不是自己")
        return applyres
    end

    local friendRelation = self.FriendMgr:GetFriendRelation(userId)
    if friendRelation == nil then
        print("用户的关系没有找到")
        return applyres
    end

    --- 如果申请人不在被申请列表，失败
    if not friendRelation:DeleteBeAppliedForFriend(nApplyID) then
        print("申请人不在被申请列表")
        applyres = Enum_ReplyResult.Failed
    else
        --- 从对方的好友关系
        local beFriendRelation = self.FriendMgr:GetFriendRelation(nApplyID)
        if beFriendRelation then
            beFriendRelation:DeleteApplyFriend(nBeAppliedID)
        end
        --- 对方在线通知对方
        if self.UserMgr:FindUserInfoPtrByUserID(nApplyID) then
            self:SendApplyFriendResult(nApplyID, apply, applyres, nil)
        end
        --- 返回成功
        applyres = Enum_ReplyResult.Successful
    end

    self:SendApplyFriendResult(userId, apply, applyres, nil)
    return applyres
end

--- 好友申请 客户端请求上来 再进行分别处理
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:ClientSubApplyFriendAction(serverId, userId, data, token)
    local recvMsg = CMD_GlobalServer_pb.CMD_C_APPLY_FRIEND()
    recvMsg:ParseFromString(data)
    local apply = recvMsg.apply
    --- c# 发送同意枚举收不到 第一个枚举 所以这里要设置一下 Probuf 的枚举必须从零开始，不然和lua通讯有问题
    if apply.opt == nil then
        apply.opt = Enum_ApplyOpt.Apply
    end
    --print(recvMsg)
    local opt = apply.opt
    --- 申请与被申请是一个玩家
    if apply.apply_id == apply.be_applied_id then
        return false
    end

    local res = false
    if opt == Enum_ApplyOpt.Apply then
        --- 申请
        res = self:ApplyFriendAction(apply, userId)
    elseif opt == Enum_ApplyOpt.Cancel then
        --- 取消
        res = self:CancelFriendRelation(apply, userId)
    elseif opt == Enum_ApplyOpt.Agree then
        --- 同意
        res = self:AgreeFriendRelation(apply, userId)
    elseif opt == Enum_ApplyOpt.refuse then
        --- 拒绝
        res = self:RefuseFriendRelation(apply, userId)
    end
    --print("ClientSubApplyFriendAction rest", res)
    --- 只有操作成功才写数据库
    if res and res == Enum_ReplyResult.Successful then
        --- 更新数据库信息
        local DBR = {}
        DBR.ApplyID = apply.apply_id
        DBR.BeAppliedID = apply.be_applied_id
        DBR.Status = opt
        self:OnUpdateApplyFriendStatus(DBR)
    end
end

--- ===================
