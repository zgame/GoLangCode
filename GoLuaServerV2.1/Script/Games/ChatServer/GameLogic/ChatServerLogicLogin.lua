--- 处理登录服相关消息
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/10/22 16:59
---


---------------  处理登录服消息 -----------------

--- 登录服注册
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:LSSubRegisterAction(serverId, userId, data, token)
    local resMsg =  CMD_GlobalServer_Inner_pb.CMD_SC_REGISTER()
    resMsg:ParseFromString(data)
    local str = string.format("InnerServerType%d", Bit32LShift(16,resMsg.server_type))
    local md5Str = string.upper(MD5Get(str))
    if md5Str ~= resMsg.server_token then
        print(string.format("md5Str = %s,resMsg.server_token == %s",md5Str,resMsg.server_token));
        print("登录服发送的 聊天服token出错");
        return false
    end
    -- 服务器连接数增加
    self.g_iServerCount = self.g_iServerCount + 1
    local sendMsg =  CMD_GlobalServer_Inner_pb.CMD_SS_REGISTER()
    sendMsg.result = CMD_GlobalServer_pb.REPLYRESULT_SUCCESSFUL_ENUM.number
    --- 设置登录服类型
    self:SetSocketLinkInfo(serverId, Enum_ChatServerLinkKind.Server)
    -- 这里的serverId 注意连接多个登录服的时候
    LuaNetWorkSend( serverId, MAIN_CHAT_SERVICE_INNER, SUB_SS_REGISTER , sendMsg,nil)
end
--- 登录服推送玩家登录token
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:LSSubPushTokonAction(serverId, userId, data, token)
   -- print(string.format("ChatServerFace:LSSubPushTokonAction:收到消息serverId=[%d],userId=[%d]",serverId,userId));
    local resMsg =  CMD_GlobalServer_Inner_pb.CMD_SC_PUSH_TOKEN();
    resMsg:ParseFromString(data);
    --print(resMsg)
    local tMsgUserInfo = resMsg.user_info or {};
    if tMsgUserInfo.user_id == nil or tMsgUserInfo.user_id == 0 then
        return ;
    end
    --print(tMsgUserInfo);
    local tUserInfo = ChatServerUserInfo:New();
    tUserInfo.sToken = resMsg.token or "";
    --print("LSSubPushTokonAction---------------------",tUserInfo.sToken )
    tUserInfo.UserId = tMsgUserInfo.user_id or 0;
    tUserInfo.GameId = tMsgUserInfo.game_id or 0;
    tUserInfo.VipLevel = tMsgUserInfo.vip_lev or 0;
    tUserInfo.FaceId = tMsgUserInfo.face_id or 0;
    tUserInfo.NickName = tMsgUserInfo.nick or "";
    tUserInfo.GuildID = tMsgUserInfo.guild_id or 0;
    tUserInfo.GuildName = tMsgUserInfo.guild_name or "";
    tUserInfo.Level = tMsgUserInfo.user_lv or 0;
    tUserInfo.SiteLevel = tMsgUserInfo.gun_lv or 0;
    tUserInfo.OnlineTime = tMsgUserInfo.online_time or 0;
    --printTable(tUserInfo)
    self.UserMgr:AddUser(tUserInfo);
    --printTable(self.UserMgr.m_mapUserInfo,0,"m_mapUserInfo");
end


---玩家登录成功登录服推送token
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:LSSubUpdateUserInfoAction(serverId, userId, data, token)
    --print(string.format("ChatServerFace:LSSubUpdateUserInfoAction:收到消息serverId=[%d],userId=[%d]",serverId,userId));
    --printTable(data);
    local resMsg =  CMD_GlobalServer_Inner_pb.CMD_SC_UPDATE_USER_INFO();
    resMsg:ParseFromString(data);
    local tMsgUserInfo = resMsg.info or {};
    if tMsgUserInfo.user_id == nil or tMsgUserInfo.user_id == 0 then
        return ;
    end
    --printTable(tUserInfo);
    local tUserInfo = ChatServerUserInfo:New();
    tUserInfo.UserId = tMsgUserInfo.user_id or 0;
    tUserInfo.GameId = tMsgUserInfo.game_id or 0;
    tUserInfo.VipLevel = tMsgUserInfo.vip_lev or 0;
    tUserInfo.FaceId = tMsgUserInfo.face_id or 0;
    tUserInfo.NickName = tMsgUserInfo.nick or "";
    tUserInfo.GuildID = tMsgUserInfo.guild_id or 0;
    tUserInfo.GuildName = tMsgUserInfo.guild_name or "";
    tUserInfo.Level = tMsgUserInfo.user_lv or 0;
    tUserInfo.SiteLevel = tMsgUserInfo.gun_lv or 0;
    tUserInfo.OnlineTime = tMsgUserInfo.online_time or 0;
    self.UserMgr:AddUser(tUserInfo);
end

---玩家登录成功登录服推送token
---@param serverId 服务器id
---@param userId 用户id
---@param data 数据
---@param token
function ChatServerLogic:LSSubTokenServerAction(serverId, userId, data, token)
    --print(string.format("ChatServerFace:LSSubTokenServerAction:收到消息serverId=[%d],userId=[%d]",serverId,userId));
    --printTable(data);
    local resMsg =  CMD_GlobalServer_Inner_pb.CMD_SC_TOKEN_USER_INFO();
    resMsg:ParseFromString(data);
    if resMsg == nil or resMsg.userid == nil then
        return false;
    end
    local tFriendInfo = self.UserMgr:FindUserInfoPtrByUserID(data.userid);
    if tFriendInfo == nil then
        return false;
    end
    local nInfoType = resMsg.info;
    if nInfoType == nil or nInfoType == Enum_UserInfoType.UIT_FACEID then
        tFriendInfo.dwFaceID = resMsg.date;
    elseif nInfoType == nil or nInfoType == Enum_UserInfoType.UIT_VIPLV then
        tFriendInfo.btVipLv = resMsg.date;
    end
    return true;
end