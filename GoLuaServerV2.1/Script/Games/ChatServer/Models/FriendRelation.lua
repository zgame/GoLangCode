--- 好友关系类
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/10/22 18:41
---


---@class ChatFriendRelation  好友关系类
FriendRelation = {}

---@return ChatFriendRelation
function FriendRelation:New()
   local c = {
        m_setApplyFriend = {},--申请好友列表
        m_setBeAppliedForFriend = {},--被申请好友列表
        m_setFriend = {},--好友列表
        m_dwMsgCount = 0,--消息自增号
    }
    setmetatable(c, self)
    self.__index = self
    return c
end

--获取好友列表
function FriendRelation:GetFriendList() --获取好友列表
    return self.m_setFriend
end

--好友是否存在
---@param dwUserID 玩家UID
function FriendRelation:IsExistedFriend(dwUserID)--好友是否存在
    local tCache = self.m_setFriend[tostring(dwUserID)]
    if tCache ~= nil then
        return true
    end
    return false;
end

--添加好友
---@param dwUserID 玩家UID
---@param uTime 申请的时间戳，缺省则表示当前时间戳
function FriendRelation:AddFriend(dwUserID, uTime)--添加好友
    self.m_setFriend[tostring(dwUserID)] = true
    return true
end

--删除好友
---@param dwUserID 玩家UID
function FriendRelation:DeleteFriend(dwUserID)
    if self.m_setFriend[tostring(dwUserID)] ~= nil then
        self.m_setFriend[tostring(dwUserID)] = nil
        return true
    end
    return false
end

--添加申请好友
---@param dwUserID 玩家UID
---@param uTime 申请的时间戳，缺省则表示当前时间戳
function FriendRelation:AddApplyFriend(dwUserID, uTime)--添加申请好友
    local tApplyData = self.m_setApplyFriend[tostring(dwUserID)]
    if tApplyData == nil then
        self.m_setApplyFriend[tostring(dwUserID)] = uTime or os.time()
        return true
    end
    return false
end

--删除申请好友
---@param dwUserID 玩家UID
function FriendRelation:DeleteApplyFriend(dwUserID)--删除申请好友
    local tApplyData = self.m_setApplyFriend[tostring(dwUserID)]
    if tApplyData == nil then
        return false
    end
    self.m_setApplyFriend[tostring(dwUserID)] = nil
    return true
end

--添加被申请好友
---@param dwUserID 玩家UID
function FriendRelation:AddBeAppliedForFriend(dwUserID, uTime)
    self.m_setBeAppliedForFriend[tostring(dwUserID)] = uTime or os.time()
    return true
end

--删除被申请好友
---@param dwUserID 玩家UID
function FriendRelation:DeleteBeAppliedForFriend(dwUserID)
    local tApplyData = self.m_setBeAppliedForFriend[tostring(dwUserID)]
    if tApplyData == nil then
        return false
    end
    self.m_setBeAppliedForFriend[tostring(dwUserID)] = nil
    return true
end


--- 好友申请关系是否存在
---@param dwUserID 玩家UID
function FriendRelation:IsExistedApplyFriend(dwUserID)
    local tCache = self.m_setApplyFriend[tostring(dwUserID)]
    if tCache ~= nil then
        return true
    end
    return false
end

--- 被申请是否已存在
---@param dwUserID 玩家UID
function FriendRelation:IsExistedBeAppliedForFriend(dwUserID)
    local tCache = self.m_setBeAppliedForFriend[tostring(dwUserID)]
    if tCache ~= nil then
        return true
    end
    return false
end

--- 是否有被申请好友请求
---@param dwUserID 玩家UID
function FriendRelation:IsThereAnyBeAppliedForFriend()
    local count = 0
    --printTable(self.m_setBeAppliedForFriend,0,"m_setBeAppliedForFriend")
    for  i,beApp in  pairs(self.m_setBeAppliedForFriend) do
        count = count + 1
        break  -- 有一个就证明就有被申请的
    end
    return count > 0
end

--- 获取好友数量
function FriendRelation:GetFriendNum()
    return GetHashTableLen(self.m_setFriend)
end


--- 消息自增号
function  FriendRelation:GenerateMessageID()
    self.m_dwMsgCount = self.m_dwMsgCount + 1
    return self.m_dwMsgCount
end

---获取申请列表
function FriendRelation:GetApplyFriendList()
    return self.m_setApplyFriend;
end

---获取申请列表数量
function FriendRelation:GetApplyFriendListNum()
    return GetHashTableLen(self.m_setApplyFriend)
end


---获取被申请的列表
function FriendRelation:GetBeAppliedForFriendList()
    return self.m_setBeAppliedForFriend;
end


--- 重新加载类
function FriendRelation:Reload(o)
    --- 重新刷一次元表,以便调用新定义方法，更新老方法
    G_SetMetaTable(o,self)
    -- 如果热更新有改动成员变量的定义的话， 下面需要进行成员变量的处理
    -- 比如 1 增加了字段， 那么你需要将老数据进行， 新字段的初始化
    -- 比如 2 删除了字段， 那么你需要将老数据进行， 老字段=nil
    -- 比如 3 修改了字段， 那么你需要将老数据进行， 老字段=nil， 新字段初始化或者进行赋值处理
end