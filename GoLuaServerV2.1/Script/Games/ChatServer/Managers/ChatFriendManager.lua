---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/10/22 19:21

---好友管理器


---@class ChatFriendManager
ChatFriendManager = {}


---@return ChatFriendManager
function ChatFriendManager:New()
    local c = {
        m_mapFriendRelation = {},--好友关系
        m_mapUnreadMessageCache = {},--未读消息缓存器
    }
    setmetatable(c, self)
    self.__index = self
    return c
end
--- 获取好友关系管理
---@return ChatFriendRelation
function ChatFriendManager:AddFriendRelation(dwUserID) --新增好友关系
    if dwUserID == nil or dwUserID <= 0 then
        return nil
    end
    local tRelationData = self:GetFriendRelation(dwUserID)
    if tRelationData == nil then
        tRelationData = FriendRelation:New()
        self.m_mapFriendRelation[tostring(dwUserID)] = tRelationData
    end
    return tRelationData
end
---@return ChatFriendRelation
function ChatFriendManager:GetFriendRelation(dwUserID)--获取指定玩家的好友关系
    return self.m_mapFriendRelation[tostring(dwUserID)];
end
function ChatFriendManager:DeleteFriendRelation(dwUserID)
    if self.m_mapFriendRelation[tostring(dwUserID)] ~= nil then
        self.m_mapFriendRelation[tostring(dwUserID)] = nil
    end
end
---@return ChatUnreadMessageCache
function ChatFriendManager:AddUnreadMessageCache(dwUserID)--添加未读消息缓存对象
    if dwUserID == nil or dwUserID <= 0 then
        return nil
    end
    local tUnreadMessageCache = self:GetUnreadMessageCache(dwUserID);
    if tUnreadMessageCache == nil then
        tUnreadMessageCache = ChatUnreadMessageCache:New(dwUserID);
        self.m_mapUnreadMessageCache[tostring(dwUserID)] = tUnreadMessageCache;
    end
    return tUnreadMessageCache;
end
---@return ChatUnreadMessageCache
--- 获取未读消息缓存对象
function ChatFriendManager:GetUnreadMessageCache(dwUserID)
    --printTable(self.m_mapUnreadMessageCache,0,"self.m_mapUnreadMessageCache")
    return self.m_mapUnreadMessageCache[tostring(dwUserID)];
end

---添加未读消息
function ChatFriendManager:AddUnreadMessage(dwUserID,dwFriendID,msg)
    if dwUserID == nil or dwFriendID == nil or dwUserID <= 0 or dwFriendID <= 0  or msg == nil then
        return false;
    end
    local tUnreadMessageCache = self:GetUnreadMessageCache(dwUserID);
    if tUnreadMessageCache ~= nil then
        return tUnreadMessageCache:AddUnreadMessage(dwFriendID,msg);
    end
end

--- 获取好友未读消息数量
function ChatFriendManager:GetFreindUnreadCount(dwUserID,dwFriendID)
    if dwUserID == nil or dwFriendID == nil or dwUserID <= 0 or dwFriendID <= 0 then
        return 0;
    end
    local tUnreadMessageCache = self:GetUnreadMessageCache(dwUserID);
    if tUnreadMessageCache ~= nil then
        return tUnreadMessageCache:GetFreindUnreadCount(dwFriendID);
    end
    return 0;
end

---获取好友最新消息的时间
function ChatFriendManager:GetFriendUnreadMsgTime(dwUserID,dwFriendID)
    if dwUserID == nil or dwFriendID == nil or dwUserID <= 0 or dwFriendID <= 0 then
        return 0;
    end
    local tUnreadMessageCache = self:GetUnreadMessageCache(dwUserID);
    if tUnreadMessageCache ~= nil then
        return tUnreadMessageCache:GetFreindUnreadMsgTime(dwFriendID);
    end
    return 0;
end
---获取待保存的消息列表
---@param vecMsg 未读消息缓存的数数组
function ChatFriendManager:GetWillSaveMessageList()
    local vecMsg = {};
    if self.m_mapUnreadMessageCache == nil then
        return vecMsg
    end

    for key,value in pairs(self.m_mapUnreadMessageCache) do
        vecMsg = value:GetWillSaveMessageList(vecMsg);
    end
    return vecMsg;
end

--- 检查未读消息
function ChatFriendManager:CheckUnreadMessageCacheAlive(setOnlineUser,nAliveTime)--检查缓存生存周期
    local tCurTime = os.time();
    --- 需要保存消息
    local vecMsg = {};
    for key,value in pairs(self.m_mapUnreadMessageCache) do
        --- 在线的玩家的不处理
        if setOnlineUser[key] ~= nil then

        else
            if value:GetLastUpdateTime() + nAliveTime <= tCurTime then
                --print(string.format("CheckUnreadMessageCacheAlive:删除玩家[%s]的好友关系数据",key))
                --- 提取消息
                vecMsg = value:GetWillSaveMessageList(vecMsg)
                self:DeleteFriendRelation(key)
                self.m_mapUnreadMessageCache[key] = nil
            end
        end
    end
    --- 向数据库保存未读消息
    ChatServerLogicInstance:OnSaveUnreadMessage(vecMsg)
end

--- 重新加载
function ChatFriendManager:Reload(o)
    --- 重新刷一次元表,以便调用新定义方法，更新老方法
    G_SetMetaTable(o,self)
    --- 好友关系重新加载
    if self.m_mapFriendRelation and next(self.m_mapFriendRelation) then
        for userid,relation in pairs(self.m_mapFriendRelation) do
            FriendRelation:Reload(self.m_mapFriendRelation[userid])
        end
    end
    --- 未读消息缓存重新加载
    if self.m_mapUnreadMessageCache and next(self.m_mapUnreadMessageCache) then
        for userid,unreadMessageCache in pairs(self.m_mapUnreadMessageCache) do
            ChatUnreadMessageCache:Reload(self.m_mapUnreadMessageCache[userid])
        end
    end
end


