---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by soonyo.
--- DateTime: 2019/11/19 9:25

--- 自动申请好友关系，后台向数据库ApplyFriendController表添加申请人,服务器定时加载信息，自动推送申请信息

--region   自动申请好友关系相关
--- 清空申请列表
function ChatServerLogic:ClearApplyControllerTable()
    self.m_pApplyControllerList = {}
end

--- 加载好友申请控制
function ChatServerLogic:LoadApplyFriendController()
    --- 从数据库加载好友控制信息
    local resT = self:OnLoadApplyFriendController()
    if resT == nil or next(resT) == nil then
        return
    end
    --- 清理以前的控制列表的数据
    self:ClearApplyControllerTable()
    --- 向控制列表添加信息
    for _, k in ipairs(resT) do
        self:OnDBLoadApplyFriendController(k)
    end
    --- 最后 设置控制请求
    self:SetApplyController(true)
end

--- 添加好友申请列表
---@param applyInfo 请求加好友信息
function ChatServerLogic:OnDBLoadApplyFriendController(applyInfo)
    if applyInfo == nil then
        return
    end
    local controller = ChatApplyController:New()
    controller.dwUserID = applyInfo.UserID
    controller.btVipMin = applyInfo.VipMin
    controller.btVipMax = applyInfo.VipMax
    controller.wGunLvMin = applyInfo.GunLvMin
    controller.wGunLvMax = applyInfo.GunLvMax
    controller.btUserLvMin = applyInfo.UserLvMin
    controller.btUserLvMax = applyInfo.UserLvMax
    controller.dwOnlineMin = applyInfo.OnlineMin
    controller.dwOnlineMax = applyInfo.OnlineMax
    controller.bIsAddApply = true
    --- 这个contextid 是0  定时器调用的没有传递
    controller.dwContextID = 0
    --- 这里修改下改为hash表
    self:AddApplyController(controller)
    ---table.insert(self.m_pApplyControllerList, controller)
end

--- 添加信息控制信息
---@param controller ChatApplyController
function ChatServerLogic:AddApplyController(controller)
    self.m_pApplyControllerList[tostring(controller.dwUserID)] = controller
end

--- 根据玩家id获取控制信息
---@param userid 用户id
---@return ChatApplyController
function ChatServerLogic:GetApplyContorllerByUserID(userid)
        return self.m_pApplyControllerList[tostring(userid)]
end

--- 设置请求控制
---@param isApply  boolean  是否触发推送
function ChatServerLogic:SetApplyController(isApply)
    self.m_bApplyController = isApply or false
end

--- 自动发送好友申请
function ChatServerLogic:AutoSendApplyFriend()
    if self.m_bApplyController == false
            or self.m_pApplyControllerList == nil
            or next(self.m_pApplyControllerList) == nil then
        return
    end
    --- 遍历控制列表信息,单个推送
    for _, applyController in pairs(self.m_pApplyControllerList) do
        if applyController.bIsAddApply then
            if self.UserMgr ~= nil then
                --- 这里查询用户信息
                local userInfo = self.UserMgr:GetExistUserInfo(applyController.dwUserID)
                if userInfo ~= nil then
                    --- 这里不再添加到用户列表中因为用户信息可以在redis中取
                    self:AutoApplyFriend(userInfo)
                end
            end
        end
    end
end

--- 给玩家发送申请消息
---@param pUser ChatServerUserInfo
function ChatServerLogic:AutoApplyFriend(pUser)
    if pUser == nil then
        return
    end
    local UserId = pUser.UserId
    --- 获取控制信息
    local temApplyController = self:GetApplyContorllerByUserID(UserId)
    --- 这里的查找可以干掉
    --for i, applyController in pairs(self.m_pApplyControllerList) do
    --    if applyController.bIsAddApply and applyController.dwUserID == UserId then
    --        temApplyController = applyController
    --        isUpdate = true
    --        break
    --    end
    --end
    --- 查找到的用户数据未空，或者已经申请过
    if temApplyController == nil or temApplyController.bIsAddApply == false then
        return
    end
    --- 查看自己是否在线
    local pUserInfoptr = self.UserMgr:FindUserInfoPtrByUserID(UserId)
    --- 构造发送的数据
    local SendApply = CMD_GlobalServer_pb.ApplyFiend()      --- 申请好友信息返回
    SendApply.apply_id = UserId
    SendApply.opt = Enum_ApplyOpt.Apply
    local currentTime = os.time()
    for _, friendUser in pairs(self.UserMgr:GetOnlineUserList()) do
        ---模拟continue
        repeat
            if friendUser == nil then
                break  --- 跳出repeat
            end
            --- 好友的 id
            local friendUserId = friendUser.UserId
            if friendUserId == 0 then
                break  --- 跳出repeat
            end
            --- 不是自己的才处理
            if UserId == friendUserId then
                break --- 跳出repeat
            end
            --- 好友关系类
            local pTargetFriends = self.FriendMgr:GetFriendRelation(friendUserId)  --- 检查朋友关系
            if pTargetFriends == nil
                    or pTargetFriends:IsExistedFriend(UserId) ---朋友关系
                    or pTargetFriends:IsExistedBeAppliedForFriend(UserId) --- 存在被申请关系
                    or pTargetFriends:IsExistedApplyFriend(UserId) then     --- 存在朋友申请关系
                break  --- 跳出repeat
            end
            --- 检查申请条件
            if (temApplyController.btVipMax > 0 and friendUser.btVipLv > temApplyController.btVipMax)
                    or friendUser.btVipLv < temApplyController.btVipMin
                    or (temApplyController.btUserLvMax > 0 and friendUser.btUserLv > temApplyController.btUserLvMax)
                    or friendUser.btUserLv < temApplyController.btUserLvMin
                    or (temApplyController.wGunLvMax > 0 and friendUser.wGunLv > temApplyController.btUserLvMax)
                    or friendUser.wGunLv < temApplyController.wGunLvMin
                    or (temApplyController.dwOnlineMax > 0 and friendUser.dwOnlineTime > temApplyController.dwOnlineMax)
                    or friendUser.dwOnlineTime < temApplyController.dwOnlineMin then
                break --- 跳出repeat
            end
            --- 检查还有数量vip 限制
            local nFriendCountMax = GetFriendMaxNumByVipLv(friendUser.VipLv)
            if pTargetFriends:GetFriendNum() >= nFriendCountMax then
                break --- 跳出repeat
            end
            --- 设置被申请ID
            SendApply.be_applied_id = friendUserId
            ---向对方的被申请好友列表添加信息
            pTargetFriends:AddBeAppliedForFriend(UserId, currentTime)
            local pFriendParameter = self:FindUserInfoPtrByUserID(friendUserId)
            if pFriendParameter ~= nil then
                --- 如果对方在线通知对方
                self:SendApplyFriendResult(friendUserId, SendApply, Enum_ReplyResult.Successful, pUser)
            end

            if pUserInfoptr ~= nil then
                self:SendApplyFriendResult(UserId, SendApply, Enum_ReplyResult.Successful, pUser)
            end
        until true ---模拟continue 结束
    end
    --- 更改状态
    temApplyController.bIsAddApply = false
    --- 更改数据库状态
    self:OnUpdateApplyFriendController(UserId)
    local bController = false
    --- 检测是否还有检测信息
    for i, ctr in pairs(self.m_pApplyControllerList) do
        if ctr.bIsAddApply then
            bController = true
            break
        end
    end
    self.m_bApplyController = bController

end
--endregion --------------------