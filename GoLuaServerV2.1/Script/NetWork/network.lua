---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/10/12 14:56
---

----------------------------------------------------------------------
---网络连接成功时候的初始化
----------------------------------------------------------------------
local MDM_KN_COMMAND = 0 -- 内核命令
local SUB_KN_DETECT_SOCKET = 1 -- 检测命令

---网络连接成功时候的初始化
function GoCallLuaNetWorkInit(serverId)

    local switch={}
    switch["Game"] = GameNetworkInit                     -- 启动游戏服
    switch["MainCenter"] = MainCenterServer.Init                 -- 启动主中心服
    -- 运行对应server type的函数
    switch[ServerTypeName](serverId)


    --if serverId == ServerIDofLogServer then
    --    -- 登录日志服成功，开始申请注册客户端
    --    --LuaNetWorkSend(ServerIDofLogServer, MAIN_CMD_ID, SUB_C_MONITOR_REG, nil, nil)
    --elseif serverId == ServerIDofCorrespondServer then
    --    -- 登录协调服成功，开始申请注册客户端
    --    --ChatServerRegisterCorrespondServer()
    --else
    --    ---其他socket 连接了本服务器
    --    --Logger("聊天服有链接了"..serverId)
    --    --Logger("GoCallLuaNetWorkInit 其他socket 连接了 " ..  serverId)
    --    --if ChatServerLogicInstance ~= nil then
    --    --    ChatServerLogicInstance:OnSocketLink(serverId)
    --    --end
    --end
end


----------------------------------------------------------------------
---接收消息
----------------------------------------------------------------------
-- 网络接收函数
function GoCallLuaNetWorkReceive(serverId, userId, msgId, subMsgId, data, token)

    --Logger("lua收到了消息serverId："..serverId)
    --Logger("lua收到了消息msgId："..msgId)
    --Logger("lua收到了消息subMsgId："..subMsgId)
    --Logger("lua收到了消息："..data)
    -- 如果是内核命令直接发送相关命令到对应的server
    --if msgId == MDM_KN_COMMAND and subMsgId == SUB_KN_DETECT_SOCKET then
    --    LuaNetWorkSend(serverId, MDM_KN_COMMAND, SUB_KN_DETECT_SOCKET, nil, nil)
    --    return
    --end
    ---- 处理消息分发各服务器处理
    --local mianCMDDispater =  NetWorkMainCMDDispater[msgId]
    --if mianCMDDispater ~= nil then
    --    mianCMDDispater(serverId,userId,msgId,subMsgId,data, token)
    --    return
    --end
    --if ServerTypeName == "MainServer" then
    --    MainCenterServer.Receive(serverId, userId, msgId, subMsgId, data, token)
    --end
    local switch={}
    switch["Game"] = GameReceiveMsg                     -- 游戏服
    switch["MainCenter"] = MainCenterServer.Receive                 -- 主中心服
    -- 运行对应server type的函数
    switch[ServerTypeName](serverId, userId, msgId, subMsgId, data, token)


    --GameReceiveMsg(serverId, userId, msgId, subMsgId, data, token)
    -- 统计消息数量
    --local now = GetOsTimeMillisecond()
    --if now - ZswLogShowReceiveLastTime > 1000 then
    --    ZswLogShowReceiveLastTime = now
    --    print("1秒接收消息数量", ZswLogShowReceiveMsgNum)
    --    -- 给服务器一分钟统计提供数据
    --    if ServerStateReceiveNum == 0 then
    --        ServerStateReceiveNum = ZswLogShowReceiveMsgNum   -- 赋值即可
    --    else
    --        ServerStateReceiveNum =  math.ceil(  (ServerStateReceiveNum+ZswLogShowReceiveMsgNum)/2)   -- 求一下平均值
    --    end
    --    ZswLogShowReceiveMsgNum = 0
    --else
    --    ZswLogShowReceiveMsgNum = ZswLogShowReceiveMsgNum + 1       -- 没到一秒就加数量
    --end
    --    LuaNetWorkSend(msgId,subMsgId,"lua想发送消息", "")
end


--- go通知lua 所有掉线的连接都要走这里
function GoCallLuaPlayerNetworkBroken(uid, serverId)
    local switch={}
    switch["Game"] = GameNetworkBroken                     -- 游戏服
    switch["MainCenter"] = MainCenterServer.Broken                 -- 主中心服
    -- 运行对应server type的函数
    switch[ServerTypeName](uid, serverId)


end